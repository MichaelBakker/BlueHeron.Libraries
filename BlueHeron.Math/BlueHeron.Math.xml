<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlueHeron.Math</name>
    </assembly>
    <members>
        <member name="T:BlueHeron.Math.Numerics.Constants">
            <summary>
            A collection of frequently used mathematical constants.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.errInvalidParameterization">
            <summary>Invalid parameterization for the distribution.</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.errValueGtZero">
            <summary>Value must be positive (and not zero).</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.errValuePositive">
            <summary>Value must be positive.</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.errInvalidParameterSet">
            <summary>The chosen parameter set is invalid (probably some value is out of range).</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.E">
            <summary>The number e</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Log2E">
            <summary>The number log[2](e)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Log10E">
            <summary>The number log[10](e)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Ln2">
            <summary>The number log[e](2)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Ln10">
            <summary>The number log[e](10)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.LnPi">
            <summary>The number log[e](pi)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Ln2PiOver2">
            <summary>The number log[e](2*pi)/2</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.InvE">
            <summary>The number 1/e</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.SqrtE">
            <summary>The number sqrt(e)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Sqrt2">
            <summary>The number sqrt(2)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Sqrt3">
            <summary>The number sqrt(3)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Sqrt1Over2">
            <summary>The number sqrt(1/2) = 1/sqrt(2) = sqrt(2)/2</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.HalfSqrt3">
            <summary>The number sqrt(3)/2</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Pi">
            <summary>The number pi</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Pi2">
            <summary>The number pi*2</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.PiOver2">
            <summary>The number pi/2</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Pi3Over2">
            <summary>The number pi*3/2</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.PiOver4">
            <summary>The number pi/4</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.SqrtPi">
            <summary>The number sqrt(pi)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Sqrt2Pi">
            <summary>The number sqrt(2pi)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.SqrtPiOver2">
            <summary>The number sqrt(pi/2)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Sqrt2PiE">
            <summary>The number sqrt(2*pi*e)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.LogSqrt2Pi">
            <summary>The number log(sqrt(2*pi))</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.LogSqrt2PiE">
            <summary>The number log(sqrt(2*pi*e))</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.LogTwoSqrtEOverPi">
            <summary>The number log(2 * sqrt(e / pi))</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.InvPi">
            <summary>The number 1/pi</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.TwoInvPi">
            <summary>The number 2/pi</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.InvSqrtPi">
            <summary>The number 1/sqrt(pi)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.InvSqrt2Pi">
            <summary>The number 1/sqrt(2pi)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.TwoInvSqrtPi">
            <summary>The number 2/sqrt(pi)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.TwoSqrtEOverPi">
            <summary>The number 2 * sqrt(e / pi)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Degree">
            <summary>The number (pi)/180 - factor to convert from Degree (deg) to Radians (rad).</summary>
            <seealso cref="!:Trig.DegreeToRadian"/>
            <seealso cref="!:Trig.RadianToDegree"/>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Grad">
            <summary>The number (pi)/200 - factor to convert from NewGrad (grad) to Radians (rad).</summary>
            <seealso cref="!:Trig.GradToRadian"/>
            <seealso cref="!:Trig.RadianToGrad"/>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.PowerDecibel">
            <summary>The number ln(10)/20 - factor to convert from Power Decibel (dB) to Neper (Np). Use this version when the Decibel represent a power gain but the compared values are not powers (e.g. amplitude, current, voltage).</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.NeutralDecibel">
            <summary>The number ln(10)/10 - factor to convert from Neutral Decibel (dB) to Neper (Np). Use this version when either both or neither of the Decibel and the compared values represent powers.</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Catalan">
            <summary>The Catalan constant</summary>
            <remarks>Sum(k=0 -> inf){ (-1)^k/(2*k + 1)2 }</remarks>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.EulerMascheroni">
            <summary>The Euler-Mascheroni constant</summary>
            <remarks>lim(n -> inf){ Sum(k=1 -> n) { 1/k - log(n) } }</remarks>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.GoldenRatio">
            <summary>The number (1+sqrt(5))/2, also known as the golden ratio</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Glaisher">
            <summary>The Glaisher constant</summary>
            <remarks>e^(1/12 - Zeta(-1))</remarks>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Khinchin">
            <summary>The Khinchin constant</summary>
            <remarks>prod(k=1 -> inf){1+1/(k*(k+2))^log(k,2)}</remarks>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.SizeOfDouble">
            <summary>
            The size of a double in bytes.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.SizeOfInt">
            <summary>
            The size of an int in bytes.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.SizeOfFloat">
            <summary>
            The size of a float in bytes.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.SizeOfComplex">
            <summary>
            The size of a Complex in bytes.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.SizeOfComplex32">
            <summary>
            The size of a Complex in bytes.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.SpeedOfLight">
            <summary>Speed of Light in Vacuum: c_0 = 2.99792458e8 [m s^-1] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.MagneticPermeability">
            <summary>Magnetic Permeability in Vacuum: mu_0 = 4*Pi * 10^-7 [N A^-2 = kg m A^-2 s^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ElectricPermittivity">
            <summary>Electric Permittivity in Vacuum: epsilon_0 = 1/(mu_0*c_0^2) [F m^-1 = A^2 s^4 kg^-1 m^-3] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.CharacteristicImpedanceVacuum">
            <summary>Characteristic Impedance of Vacuum: Z_0 = mu_0*c_0 [Ohm = m^2 kg s^-3 A^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.GravitationalConstant">
            <summary>Newtonian Constant of Gravitation: G = 6.67429e-11 [m^3 kg^-1 s^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.PlancksConstant">
            <summary>Planck's constant: h = 6.62606896e-34 [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.DiracsConstant">
            <summary>Reduced Planck's constant: h_bar = h / (2*Pi) [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.PlancksMass">
            <summary>Planck mass: m_p = (h_bar*c_0/G)^(1/2) [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.PlancksTemperature">
            <summary>Planck temperature: T_p = (h_bar*c_0^5/G)^(1/2)/k [K] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.PlancksLength">
            <summary>Planck length: l_p = h_bar/(m_p*c_0) [m] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.PlancksTime">
            <summary>Planck time: t_p = l_p/c_0 [s] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ElementaryCharge">
            <summary>Elementary Electron Charge: e = 1.602176487e-19 [C = A s] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.MagneticFluxQuantum">
            <summary>Magnetic Flux Quantum: theta_0 = h/(2*e) [Wb = m^2 kg s^-2 A^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ConductanceQuantum">
            <summary>Conductance Quantum: G_0 = 2*e^2/h [S = m^-2 kg^-1 s^3 A^2] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.JosephsonConstant">
            <summary>Josephson Constant: K_J = 2*e/h [Hz V^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.VonKlitzingConstant">
            <summary>Von Klitzing Constant: R_K = h/e^2 [Ohm = m^2 kg s^-3 A^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.BohrMagneton">
            <summary>Bohr Magneton: mu_B = e*h_bar/2*m_e [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.NuclearMagneton">
            <summary>Nuclear Magneton: mu_N = e*h_bar/2*m_p [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.FineStructureConstant">
            <summary>Fine Structure Constant: alpha = e^2/4*Pi*e_0*h_bar*c_0 [1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.RydbergConstant">
            <summary>Rydberg Constant: R_infty = alpha^2*m_e*c_0/2*h [m^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.BohrRadius">
            <summary>Bor Radius: a_0 = alpha/4*Pi*R_infty [m] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.HartreeEnergy">
            <summary>Hartree Energy: E_h = 2*R_infty*h*c_0 [J] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.QuantumOfCirculation">
            <summary>Quantum of Circulation: h/2*m_e [m^2 s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.FermiCouplingConstant">
            <summary>Fermi Coupling Constant: G_F/(h_bar*c_0)^3 [GeV^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.WeakMixingAngle">
            <summary>Weak Mixin Angle: sin^2(theta_W) [1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ElectronMass">
            <summary>Electron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ElectronMassEnergyEquivalent">
            <summary>Electron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ElectronMolarMass">
            <summary>Electron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ComptonWavelength">
            <summary>Electron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ClassicalElectronRadius">
            <summary>Classical Electron Radius: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ThomsonCrossSection">
            <summary>Thomson Cross Section: [m^2] (2002 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ElectronMagneticMoment">
            <summary>Electron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ElectronGFactor">
            <summary>Electon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.MuonMass">
            <summary>Muon Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.MuonMassEnegryEquivalent">
            <summary>Muon Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.MuonMolarMass">
            <summary>Muon Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.MuonComptonWavelength">
            <summary>Muon Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.MuonMagneticMoment">
            <summary>Muon Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.MuonGFactor">
            <summary>Muon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.TauMass">
            <summary>Tau Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.TauMassEnergyEquivalent">
            <summary>Tau Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.TauMolarMass">
            <summary>Tau Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.TauComptonWavelength">
            <summary>Tau Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ProtonMass">
            <summary>Proton Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ProtonMassEnergyEquivalent">
            <summary>Proton Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ProtonMolarMass">
            <summary>Proton Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ProtonComptonWavelength">
            <summary>Proton Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ProtonMagneticMoment">
            <summary>Proton Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ProtonGFactor">
            <summary>Proton G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ShieldedProtonMagneticMoment">
            <summary>Proton Shielded Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ProtonGyromagneticRatio">
            <summary>Proton Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.ShieldedProtonGyromagneticRatio">
            <summary>Proton Shielded Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.NeutronMass">
            <summary>Neutron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.NeutronMassEnegryEquivalent">
            <summary>Neutron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.NeutronMolarMass">
            <summary>Neutron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.NeutronComptonWavelength">
            <summary>Neuron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.NeutronMagneticMoment">
            <summary>Neutron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.NeutronGFactor">
            <summary>Neutron G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.NeutronGyromagneticRatio">
            <summary>Neutron Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.DeuteronMass">
            <summary>Deuteron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.DeuteronMassEnegryEquivalent">
            <summary>Deuteron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.DeuteronMolarMass">
            <summary>Deuteron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.DeuteronMagneticMoment">
            <summary>Deuteron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.HelionMass">
            <summary>Helion Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.HelionMassEnegryEquivalent">
            <summary>Helion Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.HelionMolarMass">
            <summary>Helion Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Avogadro">
            <summary>Avogadro constant: [mol^-1] (2010 CODATA)</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Yotta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Zetta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Exa">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Peta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Tera">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Giga">
            <summary>The SI prefix factor corresponding to 1 000 000 000</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Mega">
            <summary>The SI prefix factor corresponding to 1 000 000</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Kilo">
            <summary>The SI prefix factor corresponding to 1 000</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Hecto">
            <summary>The SI prefix factor corresponding to 100</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Deca">
            <summary>The SI prefix factor corresponding to 10</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Deci">
            <summary>The SI prefix factor corresponding to 0.1</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Centi">
            <summary>The SI prefix factor corresponding to 0.01</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Milli">
            <summary>The SI prefix factor corresponding to 0.001</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Micro">
            <summary>The SI prefix factor corresponding to 0.000 001</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Nano">
            <summary>The SI prefix factor corresponding to 0.000 000 001</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Pico">
            <summary>The SI prefix factor corresponding to 0.000 000 000 001</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Femto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 001</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Atto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 001</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Zepto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 000 001</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Constants.Yocto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 000 000 001</summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Control">
            <summary>
            Sets parameters for the library.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Control.CheckDistributionParameters">
            <summary>
            Gets or sets a value indicating whether the distribution classes check validate each parameter.
            For the multivariate distributions this could involve an expensive matrix factorization.
            The default setting of this property is <c>true</c>.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Control.ThreadSafeRandomNumberGenerators">
            <summary>
            Gets or sets a value indicating whether to use thread safe random number generators (RNG).
            Thread safe RNG about two and half time slower than non-thread safe RNG.
            </summary>
            <value>
                <c>true</c> to use thread safe random number generators ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Control.NativeProviderPath">
            <summary>
            Optional path to try to load native provider binaries from.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Control.MaxDegreeOfParallelism">
            <summary>
            Gets or sets a value indicating how many parallel worker threads shall be used
            when parallelization is applicable.
            </summary>
            <remarks>Default to the number of processor cores, must be between 1 and 1024 (inclusive).</remarks>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Control.TaskScheduler">
            <summary>
            Gets or sets the TaskScheduler used to schedule the worker tasks.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Control.ParallelizeOrder">
            <summary>
            Gets or sets the order of the matrix when linear algebra provider
            must calculate multiply in parallel threads.
            </summary>
            <value>The order. Default 64, must be at least 3.</value>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Control.ParallelizeElements">
            <summary>
            Gets or sets the number of elements a vector or matrix
            must contain before we multiply threads.
            </summary>
            <value>Number of elements. Default 300, must be at least 3.</value>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.Bernoulli">
            <summary>
            Discrete Univariate Bernoulli distribution.
            The Bernoulli distribution is a distribution over bits.
            The parameter p specifies the probability that a 1 is generated.
            <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">Wikipedia - Bernoulli distribution</a>.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Bernoulli class.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the Bernoulli parameter is not in the range [0,1].</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.#ctor(System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Bernoulli class.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the Bernoulli parameter is not in the range [0,1].</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.IsValidParameterSet(System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.P">
            <summary>
            Gets the probability of generating a one. Range: 0 ≤ p ≤ 1.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.Modes">
            <summary>
            Gets all modes of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Bernoulli.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.PMF(System.Double,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.PMFLn(System.Double,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.CDF(System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Generates one sample from the Bernoulli distribution.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>A random sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Sample">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Samples">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Sample(System.Random,System.Double)">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Samples(System.Random,System.Double)">
            <summary>
            Samples a sequence of Bernoulli distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Samples(System.Random,System.Int32[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Sample(System.Double)">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Samples(System.Double)">
            <summary>
            Samples a sequence of Bernoulli distributed random variables.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Bernoulli.Samples(System.Int32[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.Beta">
            <summary>
            Continuous Univariate Beta distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta distribution</a>.
            </summary>
            <remarks>
            There are a few special cases for the parameterization of the Beta distribution. When both
            shape parameters are positive infinity, the Beta distribution degenerates to a point distribution
            at 0.5. When one of the shape parameters is positive infinity, the distribution degenerates to a point
            distribution at the positive infinity. When both shape parameters are 0.0, the Beta distribution
            degenerates to a Bernoulli distribution with parameter 0.5. When one shape parameter is 0.0, the
            distribution degenerates to a point distribution at the non-zero shape parameter.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Beta class.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Beta class.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>A string representation of the Beta distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.A">
            <summary>
            Gets the α shape parameter of the Beta distribution. Range: α ≥ 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.B">
            <summary>
            Gets the β shape parameter of the Beta distribution. Range: β ≥ 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.Mean">
            <summary>
            Gets the mean of the Beta distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.Variance">
            <summary>
            Gets the variance of the Beta distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.StdDev">
            <summary>
            Gets the standard deviation of the Beta distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.Entropy">
            <summary>
            Gets the entropy of the Beta distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.Skewness">
            <summary>
            Gets the skewness of the Beta distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.Mode">
            <summary>
            Gets the mode of the Beta distribution; when there are multiple answers, this routine will return 0.5.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.Median">
            <summary>
            Gets the median of the Beta distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.Minimum">
            <summary>
            Gets the minimum of the Beta distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Beta.Maximum">
            <summary>
            Gets the maximum of the Beta distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Beta.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Beta.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Beta.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Beta.InvCDF(System.Double,System.Double,System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Sample">
            <summary>
            Generates a sample from the Beta distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Samples">
            <summary>
            Generates a sequence of samples from the Beta distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Samples Beta distributed random variables by sampling two Gamma variables and normalizing.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a random number from the Beta distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Beta.Density(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Beta.DensityLn(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Beta.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Beta.InverseCumulativeDistribution(System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Beta.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.BetaBinomial">
            <summary>
            Discrete Univariate Beta-Binomial distribution.
            The beta-binomial distribution is a family of discrete probability distributions on a finite support of non-negative integers arising
            when the probability of success in each of a fixed or known number of Bernoulli trials is either unknown or random.
            The beta-binomial distribution is the binomial distribution in which the probability of success at each of n trials is not fixed but randomly drawn from a beta distribution.
            It is frequently used in Bayesian statistics, empirical Bayes methods and classical statistics to capture overdispersion in binomial type distributed data.
            <a href="https://en.wikipedia.org/wiki/Beta-binomial_distribution">Wikipedia - Beta-Binomial distribution</a>.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BlueHeron.Math.Numerics.Distributions.BetaBinomial"/> class.
            </summary>
            <param name="n">The number of Bernoulli trials n - n is a positive integer </param>
            <param name="a">Shape parameter alpha of the Beta distribution. Range: a > 0.</param>
            <param name="b">Shape parameter beta of the Beta distribution. Range: b > 0.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.#ctor(System.Int32,System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:BlueHeron.Math.Numerics.Distributions.BetaBinomial"/> class.
            </summary>
            <param name="n">The number of Bernoulli trials n - n is a positive integer </param>
            <param name="a">Shape parameter alpha of the Beta distribution. Range: a > 0.</param>
            <param name="b">Shape parameter beta of the Beta distribution. Range: b > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.IsValidParameterSet(System.Int32,System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="n">The number of Bernoulli trials n - n is a positive integer </param>
            <param name="a">Shape parameter alpha of the Beta distribution. Range: a > 0.</param>
            <param name="b">Shape parameter beta of the Beta distribution. Range: b > 0.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.IsValidParameterSet(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="n">The number of Bernoulli trials n - n is a positive integer </param>
            <param name="a">Shape parameter alpha of the Beta distribution. Range: a > 0.</param>
            <param name="b">Shape parameter beta of the Beta distribution. Range: b > 0.</param>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaBinomial.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaBinomial.BlueHeron#Math#Numerics#Distributions#IUnivariateDistribution#Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaBinomial.BlueHeron#Math#Numerics#Distributions#IDiscreteDistribution#Mode">
            <summary>
            Gets the mode of the distribution
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaBinomial.BlueHeron#Math#Numerics#Distributions#IUnivariateDistribution#Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/></returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.PMF(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="n">The number of Bernoulli trials n - n is a positive integer </param>
            <param name="a">Shape parameter alpha of the Beta distribution. Range: a > 0.</param>
            <param name="b">Shape parameter beta of the Beta distribution. Range: b > 0.</param>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.PMFLn(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="n">The number of Bernoulli trials n - n is a positive integer </param>
            <param name="a">Shape parameter alpha of the Beta distribution. Range: a > 0.</param>
            <param name="b">Shape parameter beta of the Beta distribution. Range: b > 0.</param>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.CDF(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="n">The number of Bernoulli trials n - n is a positive integer </param>
            <param name="a">Shape parameter alpha of the Beta distribution. Range: a > 0.</param>
            <param name="b">Shape parameter beta of the Beta distribution. Range: b > 0.</param>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.SampleUnchecked(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples BetaBinomial distributed random variables by sampling a Beta distribution then passing to a Binomial distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a random number from the BetaBinomial distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Sample">
            <summary>
            Samples a <c>BetaBinomial</c> distributed random variable.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Samples">
            <summary>
            Samples an array of <c>BetaBinomial</c> distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples a <c>BetaBinomial</c> distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Samples(System.Random,System.Int32[],System.Int32,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Samples(System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of <c>BetaBinomial</c> distributed random variables.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaBinomial.Samples(System.Int32[],System.Int32,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the BetaScaled class.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.#ctor(System.Double,System.Double,System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the BetaScaled class.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.PERT(System.Double,System.Double,System.Double,System.Random)">
            <summary>
            Create a Beta PERT distribution, used in risk analysis and other domains where an expert forecast
            is used to construct an underlying beta distribution.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="likely">The most likely value (mode).</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <returns>The Beta distribution derived from the PERT parameters.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>A string representation of the BetaScaled distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.IsValidParameterSet(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.A">
            <summary>
            Gets the α shape parameter of the BetaScaled distribution. Range: α > 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.B">
            <summary>
            Gets the β shape parameter of the BetaScaled distribution. Range: β > 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Location">
            <summary>
            Gets the location (μ) of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Scale">
            <summary>
            Gets the scale (σ) of the BetaScaled distribution. Range: σ > 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Mean">
            <summary>
            Gets the mean of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Variance">
            <summary>
            Gets the variance of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.StdDev">
            <summary>
            Gets the standard deviation of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Entropy">
            <summary>
            Gets the entropy of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Skewness">
            <summary>
            Gets the skewness of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Mode">
            <summary>
            Gets the mode of the BetaScaled distribution; when there are multiple answers, this routine will return 0.5.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Median">
            <summary>
            Gets the median of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Minimum">
            <summary>
            Gets the minimum of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.BetaScaled.Maximum">
            <summary>
            Gets the maximum of the BetaScaled distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.PDF(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.PDFLn(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.CDF(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.InvCDF(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Sample">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Samples">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.PDF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Density(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.PDFLn(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.DensityLn(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.CDF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.InvCDF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.InverseCumulativeDistribution(System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Sample(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Samples(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Samples(System.Random,System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Sample(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Samples(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.BetaScaled.Samples(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.Binomial">
            <summary>
            Discrete Univariate Binomial distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Binomial_distribution">Wikipedia - Binomial distribution</a>.
            </summary>
            <remarks>
            The distribution is parameterized by a probability (between 0.0 and 1.0).
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the Binomial class.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="p"/> is not in the interval [0.0,1.0].</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.#ctor(System.Double,System.Int32,System.Random)">
            <summary>
            Initializes a new instance of the Binomial class.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="p"/> is not in the interval [0.0,1.0].</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.IsValidParameterSet(System.Double,System.Int32)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.P">
            <summary>
            Gets the success probability in each trial. Range: 0 ≤ p ≤ 1.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.N">
            <summary>
            Gets the number of trials. Range: n ≥ 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.Modes">
            <summary>
            Gets all modes of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Binomial.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.PMF(System.Double,System.Int32,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.PMFLn(System.Double,System.Int32,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.CDF(System.Double,System.Int32,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Binomial.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.SampleUnchecked(System.Random,System.Double,System.Int32)">
            <summary>
            Generates a sample from the Binomial distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>The number of successful trials.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Sample">
            <summary>
            Samples a Binomially distributed random variable.
            </summary>
            <returns>The number of successes in N trials.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Samples">
            <summary>
            Samples an array of Binomially distributed random variables.
            </summary>
            <returns>a sequence of successes in N trials.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Sample(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a binomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>The number of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Samples(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a sequence of binomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sequence of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Samples(System.Random,System.Int32[],System.Double,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sequence of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Sample(System.Double,System.Int32)">
            <summary>
            Samples a binomially distributed random variable.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>The number of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Samples(System.Double,System.Int32)">
            <summary>
            Samples a sequence of binomially distributed random variable.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sequence of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Binomial.Samples(System.Int32[],System.Double,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sequence of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.A">
            <summary>
            Gets the scale (a) of the distribution. Range: a > 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.C">
            <summary>
            Gets the first shape parameter (c) of the distribution. Range: c > 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.K">
            <summary>
            Gets the second shape parameter (k) of the distribution. Range: k > 0.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.#ctor(System.Double,System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Burr Type XII class.
            </summary>
            <param name="a">The scale parameter a of the Burr distribution. Range: a > 0.</param>
            <param name="c">The first shape parameter c of the Burr distribution. Range: c > 0.</param>
            <param name="k">The second shape parameter k of the Burr distribution. Range: k > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.IsValidParameterSet(System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="a">The scale parameter a of the Burr distribution. Range: a > 0.</param>
            <param name="c">The first shape parameter c of the Burr distribution. Range: c > 0.</param>
            <param name="k">The second shape parameter k of the Burr distribution. Range: k > 0.</param>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.RandomSource">
            <summary>
            Gets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.Mean">
            <summary>
            Gets the mean of the Burr distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.Variance">
            <summary>
            Gets the variance of the Burr distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.StdDev">
            <summary>
            Gets the standard deviation of the Burr distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.Mode">
            <summary>
            Gets the mode of the Burr distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.Minimum">
            <summary>
            Gets the minimum of the Burr distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.Maximum">
            <summary>
            Gets the maximum of the Burr distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.Entropy">
            <summary>
            Gets the entropy of the Burr distribution (currently not supported).
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.Skewness">
            <summary>
            Gets the skewness of the Burr distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Burr.Median">
            <summary>
            Gets the median of the Burr distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.Sample">
            <summary>
            Generates a sample from the Burr distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.Samples">
            <summary>
            Generates a sequence of samples from the Burr distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.Sample(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the Burr distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The scale parameter a of the Burr distribution. Range: a > 0.</param>
            <param name="c">The first shape parameter c of the Burr distribution. Range: c > 0.</param>
            <param name="k">The second shape parameter k of the Burr distribution. Range: k > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.Samples(System.Random,System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The scale parameter a of the Burr distribution. Range: a > 0.</param>
            <param name="c">The first shape parameter c of the Burr distribution. Range: c > 0.</param>
            <param name="k">The second shape parameter k of the Burr distribution. Range: k > 0.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.Samples(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Burr distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The scale parameter a of the Burr distribution. Range: a > 0.</param>
            <param name="c">The first shape parameter c of the Burr distribution. Range: c > 0.</param>
            <param name="k">The second shape parameter k of the Burr distribution. Range: k > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.GetMoment(System.Double)">
            <summary>
            Gets the n-th raw moment of the distribution.
            </summary>
            <param name="n">The order (n) of the moment. Range: n ≥ 1.</param>
            <returns>the n-th moment of the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Burr.PDF(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Burr.PDFLn(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Burr.CDF(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.PDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="a">The scale parameter a of the Burr distribution. Range: a > 0.</param>
            <param name="c">The first shape parameter c of the Burr distribution. Range: c > 0.</param>
            <param name="k">The second shape parameter k of the Burr distribution. Range: k > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Burr.Density(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.PDFLn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="a">The scale parameter a of the Burr distribution. Range: a > 0.</param>
            <param name="c">The first shape parameter c of the Burr distribution. Range: c > 0.</param>
            <param name="k">The second shape parameter k of the Burr distribution. Range: k > 0.</param>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Burr.DensityLn(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Burr.CDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="a">The scale parameter a of the Burr distribution. Range: a > 0.</param>
            <param name="c">The first shape parameter c of the Burr distribution. Range: c > 0.</param>
            <param name="k">The second shape parameter k of the Burr distribution. Range: k > 0.</param>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Burr.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.Categorical">
            <summary>
            Discrete Univariate Categorical distribution. For details, see <a href="http://en.wikipedia.org/wiki/Categorical_distribution">Wikipedia - Categorical distribution</a>.
            This distribution is sometimes called the Discrete distribution.
            </summary>
            <remarks>
            The distribution is parameterized by a vector of ratios: in other words, the parameter does not have to be normalized and sum to 1.
            The reason is that some vectors can't be exactly normalized to sum to 1 in floating point representation.
            </remarks>
            <remarks>
            Support: 0..k Where k = Length(probability mass array) - 1
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the Categorical class.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <exception cref="T:System.ArgumentException">If any of the probabilities are negative or do not sum to one.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.#ctor(System.Double[],System.Random)">
            <summary>
            Initializes a new instance of the Categorical class.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentException">If any of the probabilities are negative or do not sum to one.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.#ctor(Blueheron.Math.Numerics.Statistics.Histogram)">
            <summary>
            Initializes a new instance of the Categorical class from a <paramref name="histogram"/>.
            The distribution will not be automatically updated when the histogram changes.
            The categorical distribution will have one value for each bucket and a probability for that value proportional to the bucket count.
            </summary>
            <param name="histogram">The histogram from which to create the categorical variable.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.IsValidProbabilityMass(System.Double[])">
            <summary>
            Checks whether the parameters of the distribution are valid.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized as this is often impossible using floating point arithmetic.</param>
            <returns>If any of the probabilities are negative returns <c>false</c>, or if the sum of parameters is 0.0; otherwise <c>true</c></returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.IsValidCumulativeDistribution(System.Double[])">
            <summary>
            Checks whether the parameters of the distribution are valid.
            </summary>
            <param name="cdf">An array of nonnegative ratios: this array does not need to be normalized as this is often impossible using floating point arithmetic.</param>
            <returns>If any of the probabilities are negative returns <c>false</c>, or if the sum of parameters is 0.0; otherwise <c>true</c></returns>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.P">
            <summary>
            Gets the probability mass vector (non-negative ratios) of the multinomial.
            </summary>
            <remarks>Sometimes the normalized probability vector cannot be represented exactly in a floating point representation.</remarks>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
            <remarks>Throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.Mode">
            <summary>
            Gets he mode of the distribution.
            </summary>
            <remarks>Throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Categorical.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability.
            </summary>
            <param name="probability">A real number between 0 and 1.</param>
            <returns>An integer between 0 and the size of the categorical (exclusive), that corresponds to the inverse CDF for the given probability.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.PMF(System.Double[],System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.PMFLn(System.Double[],System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.CDF(System.Double[],System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Categorical.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.InvCDF(System.Double[],System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution at the given probability.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <param name="probability">A real number between 0 and 1.</param>
            <returns>An integer between 0 and the size of the categorical (exclusive), that corresponds to the inverse CDF for the given probability.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.InvCDFWithCumulativeDistribution(System.Double[],System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability.
            </summary>
            <param name="cdfUnnormalized">An array corresponding to a CDF for a categorical distribution. Not assumed to be normalized.</param>
            <param name="probability">A real number between 0 and 1.</param>
            <returns>An integer between 0 and the size of the categorical (exclusive), that corresponds to the inverse CDF for the given probability.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.ProbabilityMassToCumulativeDistribution(System.Double[])">
            <summary>
            Computes the cumulative distribution function. This method performs no parameter checking.
            If the probability mass was normalized, the resulting cumulative distribution is normalized as well (up to numerical errors).
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <returns>An array representing the unnormalized cumulative distribution function.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.SampleUnchecked(System.Random,System.Double[])">
            <summary>
            Returns one trials from the categorical distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdfUnnormalized">The (unnormalized) cumulative distribution of the probability distribution.</param>
            <returns>One sample from the categorical distribution implied by <paramref name="cdfUnnormalized"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Sample">
            <summary>
            Samples a Binomially distributed random variable.
            </summary>
            <returns>The number of successful trials.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Samples">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <returns>a sequence of successful trial counts.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Sample(System.Random,System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Samples(System.Random,System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Samples(System.Random,System.Int32[],System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Sample(System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Samples(System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.Samples(System.Int32[],System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.SampleWithCumulativeDistribution(System.Random,System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.SamplesWithCumulativeDistribution(System.Random,System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.SamplesWithCumulativeDistribution(System.Random,System.Int32[],System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.SampleWithCumulativeDistribution(System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.SamplesWithCumulativeDistribution(System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Categorical.SamplesWithCumulativeDistribution(System.Int32[],System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.Gamma">
             <summary>
             Continuous Univariate Gamma distribution.
             For details about this distribution, see
             <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
             </summary>
             <remarks>
             The Gamma distribution is parametrized by a shape and inverse scale parameter. When we want
             to specify a Gamma distribution which is a point distribution we set the shape parameter to be the
             location of the point distribution and the inverse scale as positive infinity. The distribution
             with shape and inverse scale both zero is undefined.
            
             Random number generation for the Gamma distribution is based on the algorithm in:
             "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
             ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.
             </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Gamma class.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Gamma class.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.WithShapeScale(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a Gamma distribution from a shape and scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape (k) of the Gamma distribution. Range: k ≥ 0.</param>
            <param name="scale">The scale (θ) of the Gamma distribution. Range: θ ≥ 0</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.WithShapeRate(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a Gamma distribution from a shape and inverse scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Shape">
            <summary>
            Gets or sets the shape (k, α) of the Gamma distribution. Range: α ≥ 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Rate">
            <summary>
            Gets or sets the rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Scale">
            <summary>
            Gets or sets the scale (θ) of the Gamma distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Mean">
            <summary>
            Gets the mean of the Gamma distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Variance">
            <summary>
            Gets the variance of the Gamma distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.StdDev">
            <summary>
            Gets the standard deviation of the Gamma distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Entropy">
            <summary>
            Gets the entropy of the Gamma distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Skewness">
            <summary>
            Gets the skewness of the Gamma distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Mode">
            <summary>
            Gets the mode of the Gamma distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Median">
            <summary>
            Gets the median of the Gamma distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Minimum">
            <summary>
            Gets the minimum of the Gamma distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Gamma.Maximum">
            <summary>
            Gets the maximum of the Gamma distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Gamma.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Gamma.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Gamma.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Gamma.InvCDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Sample">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Samples">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            <para>Sampling implementation based on:
            "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
            ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.</para>
            <para>This method performs no parameter checks.</para>
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>A sample from a Gamma distributed random variable.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Gamma.Density(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Gamma.DensityLn(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Gamma.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Gamma.InverseCumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Gamma.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution">
            <summary>
            Continuous Univariate Probability Distribution.
            </summary>
            <seealso cref="T:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution"/>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution.Minimum">
            <summary>
            Gets the smallest element in the domain of the distribution which can be represented by a double.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution.Maximum">
            <summary>
            Gets the largest element in the domain of the distribution which can be represented by a double.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution.Samples">
            <summary>
            Draws a sequence of random samples from the distribution.
            </summary>
            <returns>an infinite sequence of samples from the distribution.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution">
            <summary>
            Discrete Univariate Probability Distribution.
            </summary>
            <seealso cref="T:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution"/>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution.Minimum">
            <summary>
            Gets the smallest element in the domain of the distribution which can be represented by an integer.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution.Maximum">
            <summary>
            Gets the largest element in the domain of the distribution which can be represented by an integer.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution.Samples">
            <summary>
            Draws a sequence of random samples from the distribution.
            </summary>
            <returns>an infinite sequence of samples from the distribution.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.IDistribution">
            <summary>
            Probability Distribution.
            </summary>
            <seealso cref="T:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution"/>
            <seealso cref="T:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution"/>
            <seealso cref="T:BlueHeron.Math.Numerics.Distributions.IUnivariateDistribution"/>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IDistribution.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.IUnivariateDistribution">
            <summary>
            Univariate Probability Distribution.
            </summary>
            <seealso cref="T:BlueHeron.Math.Numerics.Distributions.IContinuousDistribution"/>
            <seealso cref="T:BlueHeron.Math.Numerics.Distributions.IDiscreteDistribution"/>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IUnivariateDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IUnivariateDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IUnivariateDistribution.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IUnivariateDistribution.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IUnivariateDistribution.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.IUnivariateDistribution.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.IUnivariateDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Distributions.Normal">
            <summary>
            Continuous Univariate Normal distribution, also known as Gaussian distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal distribution</a>.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.#ctor">
            <summary>
            Initializes a new instance of the Normal class. This is a normal distribution with mean 0.0
            and standard deviation 1.0. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.#ctor(System.Random)">
            <summary>
            Initializes a new instance of the Normal class. This is a normal distribution with mean 0.0
            and standard deviation 1.0. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Normal class with a particular mean and standard deviation. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Normal class with a particular mean and standard deviation. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.WithMeanStdDev(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a normal distribution from a mean and standard deviation.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.WithMeanVariance(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a normal distribution from a mean and variance.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="var">The variance (σ^2) of the normal distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>A normal distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.WithMeanPrecision(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a normal distribution from a mean and precision.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="precision">The precision of the normal distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>A normal distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Estimate(System.Collections.Generic.IEnumerable{System.Double},System.Random)">
            <summary>
            Estimates the normal distribution parameters from sample data with maximum-likelihood.
            </summary>
            <param name="samples">The samples to estimate the distribution parameters from.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>A normal distribution.</returns>
            <remarks>MATLAB: normfit</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.Mean">
            <summary>
            Gets the mean (μ) of the normal distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.StdDev">
            <summary>
            Gets the standard deviation (σ) of the normal distribution. Range: σ ≥ 0.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.Variance">
            <summary>
            Gets the variance of the normal distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.Precision">
            <summary>
            Gets the precision of the normal distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.RandomSource">
            <summary>
            Gets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.Entropy">
            <summary>
            Gets the entropy of the normal distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.Skewness">
            <summary>
            Gets the skewness of the normal distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.Mode">
            <summary>
            Gets the mode of the normal distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.Median">
            <summary>
            Gets the median of the normal distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.Minimum">
            <summary>
            Gets the minimum of the normal distribution.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Distributions.Normal.Maximum">
            <summary>
            Gets the maximum of the normal distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Normal.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Normal.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Normal.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Normal.InvCDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Sample">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Samples">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Normal.Density(System.Double)"/>
            <remarks>MATLAB: normpdf</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Normal.DensityLn(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Normal.CumulativeDistribution(System.Double)"/>
            <remarks>MATLAB: normcdf</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Distributions.Normal.InverseCumulativeDistribution(System.Double)"/>
            <remarks>MATLAB: norminv</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Distributions.Normal.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Euclid">
            <summary>
            Integer number theory functions.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Modulus(System.Double,System.Double)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Modulus(System.Single,System.Single)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Modulus(System.Int32,System.Int32)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Modulus(System.Int64,System.Int64)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Remainder(System.Double,System.Double)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Remainder(System.Single,System.Single)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Remainder(System.Int32,System.Int32)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Remainder(System.Int64,System.Int64)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.IsEven(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an even number.
            </summary>
            <param name="number">The number to very whether it's even.</param>
            <returns>True if and only if it is an even number.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.IsEven(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is an even number.
            </summary>
            <param name="number">The number to very whether it's even.</param>
            <returns>True if and only if it is an even number.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.IsOdd(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an odd number.
            </summary>
            <param name="number">The number to very whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.IsOdd(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is an odd number.
            </summary>
            <param name="number">The number to very whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.IsPowerOfTwo(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.IsPowerOfTwo(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.IsPerfectSquare(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is a perfect square, i.e. a square of an integer.
            </summary>
            <param name="number">The number to very whether it's a perfect square.</param>
            <returns>True if and only if it is a perfect square.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.IsPerfectSquare(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is a perfect square, i.e. a square of an integer.
            </summary>
            <param name="number">The number to very whether it's a perfect square.</param>
            <returns>True if and only if it is a perfect square.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.PowerOfTwo(System.Int32)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 31).
            </summary>
            <param name="exponent">The exponent to raise 2 up to.</param>
            <returns>2 ^ exponent.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.PowerOfTwo(System.Int64)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 63).
            </summary>
            <param name="exponent">The exponent to raise 2 up to.</param>
            <returns>2 ^ exponent.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.Log2(System.Int32)">
            <summary>
            Evaluate the binary logarithm of an integer number.
            </summary>
            <remarks>Two-step method using a De Bruijn-like sequence table lookup.</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.CeilingToPowerOfTwo(System.Int32)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided
            32 bit integer.
            </summary>
            <param name="number">The number of which to find the closest upper power of two.</param>
            <returns>A power of two.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.CeilingToPowerOfTwo(System.Int64)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided
            64 bit integer.
            </summary>
            <param name="number">The number of which to find the closest upper power of two.</param>
            <returns>A power of two.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.GreatestCommonDivisor(System.Int64,System.Int64)">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of two integers using Euclid's algorithm.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.GreatestCommonDivisor(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of integers using Euclid's
            algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.GreatestCommonDivisor(System.Int64[])">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.ExtendedGreatestCommonDivisor(System.Int64,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Computes the extended greatest common divisor, such that a*x + b*y = <c>gcd</c>(a,b).
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <param name="x">Resulting x, such that a*x + b*y = <c>gcd</c>(a,b).</param>
            <param name="y">Resulting y, such that a*x + b*y = <c>gcd</c>(a,b)</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
            <example>
            <code>
            long x,y,d;
            d = Fn.GreatestCommonDivisor(45,18,out x, out y);
            -> d == 9 &amp;&amp; x == 1 &amp;&amp; y == -2
            </code>
            The <c>gcd</c> of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
            </example>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.LeastCommonMultiple(System.Int64,System.Int64)">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of two integers using Euclid's algorithm.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Least common multiple <c>lcm</c>(a,b)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.LeastCommonMultiple(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.LeastCommonMultiple(System.Int64[])">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of two big integers.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.GreatestCommonDivisor(System.Collections.Generic.IList{System.Numerics.BigInteger})">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.GreatestCommonDivisor(System.Numerics.BigInteger[])">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.ExtendedGreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
            Computes the extended greatest common divisor, such that a*x + b*y = <c>gcd</c>(a,b).
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <param name="x">Resulting x, such that a*x + b*y = <c>gcd</c>(a,b).</param>
            <param name="y">Resulting y, such that a*x + b*y = <c>gcd</c>(a,b)</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
            <example>
            <code>
            long x,y,d;
            d = Fn.GreatestCommonDivisor(45,18,out x, out y);
            -> d == 9 &amp;&amp; x == 1 &amp;&amp; y == -2
            </code>
            The <c>gcd</c> of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
            </example>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.LeastCommonMultiple(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of two big integers.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Least common multiple <c>lcm</c>(a,b)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.LeastCommonMultiple(System.Collections.Generic.IList{System.Numerics.BigInteger})">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Euclid.LeastCommonMultiple(System.Numerics.BigInteger[])">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.NonConvergenceException">
            <summary>
            An algorithm failed to converge.
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.NumericalBreakdownException">
            <summary>
            An algorithm failed to converge due to a numerical breakdown.
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.NativeInterfaceException">
            <summary>
            An error occurred calling native provider function.
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.InvalidParameterException">
            <summary>
            An error occurred calling native provider function.
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.MemoryAllocationException">
            <summary>
            Native provider was unable to allocate sufficient memory.
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.SingularUMatrixException">
            <summary>
            Native provider failed LU inversion do to a singular U matrix.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Map``2(``0[],System.Func{``0,``1})">
            <summary>
            Generate samples by sampling a function at the provided points.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.MapSequence``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Generate a sample sequence by sampling a function at the provided point sequence.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Map2``3(``0[],``1[],System.Func{``0,``1,``2})">
            <summary>
            Generate samples by sampling a function at the provided points.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Map2Sequence``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Generate a sample sequence by sampling a function at the provided point sequence.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LinearSpaced(System.Int32,System.Double,System.Double)">
            <summary>
            Generate a linearly spaced sample vector of the given length between the specified values (inclusive).
            Equivalent to MATLAB linspace but with the length as first instead of last argument.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LinearSpacedMap``1(System.Int32,System.Double,System.Double,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at linearly spaced points between the specified values (inclusive).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LogSpaced(System.Int32,System.Double,System.Double)">
            <summary>
            Generate a base 10 logarithmically spaced sample vector of the given length between the specified decade exponents (inclusive).
            Equivalent to MATLAB logspace but with the length as first instead of last argument.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LogSpacedMap``1(System.Int32,System.Double,System.Double,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at base 10 logarithmically spaced points between the specified decade exponents (inclusive).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LinearRange(System.Int32,System.Int32)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and step 1.
            Equivalent to MATLAB colon operator (:).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LinearRangeInt32(System.Int32,System.Int32)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and step 1.
            Equivalent to MATLAB colon operator (:).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LinearRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and the provided step.
            The start value is aways included as first value, but stop is only included if it stop-start is a multiple of step.
            Equivalent to MATLAB double colon operator (::).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LinearRangeInt32(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and the provided step.
            The start value is aways included as first value, but stop is only included if it stop-start is a multiple of step.
            Equivalent to MATLAB double colon operator (::).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LinearRange(System.Double,System.Double,System.Double)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and the provide step.
            The start value is aways included as first value, but stop is only included if it stop-start is a multiple of step.
            Equivalent to MATLAB double colon operator (::).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.LinearRangeMap``1(System.Double,System.Double,System.Double,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at linearly spaced points within the inclusive interval (start, stop) and the provide step.
            The start value is aways included as first value, but stop is only included if it stop-start is a multiple of step.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Periodic(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic wave.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The length of the period when sampled at one sample per time unit. This is the interval of the periodic domain, a typical value is 1.0, or 2*Pi for angular functions.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.PeriodicMap``1(System.Int32,System.Func{System.Double,``0},System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic wave.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="map">The function to apply to each of the values and evaluate the resulting sample.</param>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The length of the period when sampled at one sample per time unit. This is the interval of the periodic domain, a typical value is 1.0, or 2*Pi for angular functions.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.PeriodicSequence(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic wave sequence.
            </summary>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The length of the period when sampled at one sample per time unit. This is the interval of the periodic domain, a typical value is 1.0, or 2*Pi for angular functions.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.PeriodicMapSequence``1(System.Func{System.Double,``0},System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic wave sequence.
            </summary>
            <param name="map">The function to apply to each of the values and evaluate the resulting sample.</param>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The length of the period when sampled at one sample per time unit. This is the interval of the periodic domain, a typical value is 1.0, or 2*Pi for angular functions.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Sinusoidal(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create a Sine wave.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="mean">The mean, or DC part, of the signal.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.SinusoidalSequence(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite Sine wave sequence.
            </summary>
            <param name="samplingRate">Samples per unit.</param>
            <param name="frequency">Frequency in samples per unit.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="mean">The mean, or DC part, of the signal.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Square(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic square wave, starting with the high phase.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="highDuration">Number of samples of the high phase.</param>
            <param name="lowDuration">Number of samples of the low phase.</param>
            <param name="lowValue">Sample value to be emitted during the low phase.</param>
            <param name="highValue">Sample value to be emitted during the high phase.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.SquareSequence(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic square wave sequence, starting with the high phase.
            </summary>
            <param name="highDuration">Number of samples of the high phase.</param>
            <param name="lowDuration">Number of samples of the low phase.</param>
            <param name="lowValue">Sample value to be emitted during the low phase.</param>
            <param name="highValue">Sample value to be emitted during the high phase.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Triangle(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic triangle wave, starting with the raise phase from the lowest sample.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="raiseDuration">Number of samples of the raise phase.</param>
            <param name="fallDuration">Number of samples of the fall phase.</param>
            <param name="lowValue">Lowest sample value.</param>
            <param name="highValue">Highest sample value.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.TriangleSequence(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic triangle wave sequence, starting with the raise phase from the lowest sample.
            </summary>
            <param name="raiseDuration">Number of samples of the raise phase.</param>
            <param name="fallDuration">Number of samples of the fall phase.</param>
            <param name="lowValue">Lowest sample value.</param>
            <param name="highValue">Highest sample value.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Sawtooth(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic sawtooth wave, starting with the lowest sample.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="period">Number of samples a full sawtooth period.</param>
            <param name="lowValue">Lowest sample value.</param>
            <param name="highValue">Highest sample value.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.SawtoothSequence(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic sawtooth wave sequence, starting with the lowest sample.
            </summary>
            <param name="period">Number of samples a full sawtooth period.</param>
            <param name="lowValue">Lowest sample value.</param>
            <param name="highValue">Highest sample value.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Repeat``1(System.Int32,``0)">
            <summary>
            Create an array with each field set to the same value.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="value">The value that each field should be set to.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.RepeatSequence``1(``0)">
            <summary>
            Create an infinite sequence where each element has the same value.
            </summary>
            <param name="value">The value that each element should be set to.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Step(System.Int32,System.Double,System.Int32)">
            <summary>
            Create a Heaviside Step sample vector.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.StepSequence(System.Double,System.Int32)">
            <summary>
            Create an infinite Heaviside Step sample sequence.
            </summary>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Impulse(System.Int32,System.Double,System.Int32)">
            <summary>
            Create a Kronecker Delta impulse sample vector.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis. Zero or positive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.ImpulseSequence(System.Double,System.Int32)">
            <summary>
            Create a Kronecker Delta impulse sample vector.
            </summary>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis, hence the sample index of the impulse.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.PeriodicImpulse(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Create a periodic Kronecker Delta impulse sample vector.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="period">impulse sequence period.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis. Zero or positive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.PeriodicImpulseSequence(System.Int32,System.Double,System.Int32)">
            <summary>
            Create a Kronecker Delta impulse sample vector.
            </summary>
            <param name="period">impulse sequence period.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis. Zero or positive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Unfold``2(System.Int32,System.Func{``1,System.Tuple{``0,``1}},``1)">
            <summary>
            Generate samples generated by the given computation.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Unfold``2(System.Int32,System.Func{``1,System.ValueTuple{``0,``1}},``1)">
            <summary>
            Generate samples generated by the given computation.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.UnfoldSequence``2(System.Func{``1,System.Tuple{``0,``1}},``1)">
            <summary>
            Generate an infinite sequence generated by the given computation.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.UnfoldSequence``2(System.Func{``1,System.ValueTuple{``0,``1}},``1)">
            <summary>
            Generate an infinite sequence generated by the given computation.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Fibonacci(System.Int32)">
            <summary>
            Generate a Fibonacci sequence, including zero as first value.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.FibonacciSequence">
            <summary>
            Generate an infinite Fibonacci sequence, including zero as first value.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Uniform(System.Int32)">
            <summary>
            Create random samples, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.UniformSequence">
            <summary>
            Create an infinite random sample sequence, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.UniformMap``1(System.Int32,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at samples from a probability distribution, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.UniformMapSequence``1(System.Func{System.Double,``0})">
            <summary>
            Generate a sample sequence by sampling a function at samples from a probability distribution, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.UniformMap2``1(System.Int32,System.Func{System.Double,System.Double,``0})">
            <summary>
            Generate samples by sampling a function at sample pairs from a probability distribution, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.UniformMap2Sequence``1(System.Func{System.Double,System.Double,``0})">
            <summary>
            Generate a sample sequence by sampling a function at sample pairs from a probability distribution, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.NormalSequence(System.Double,System.Double)">
            <summary>
            Create an infinite sample sequence with independent amplitudes of normal distribution and a flat spectral density.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Random(System.Int32,BlueHeron.Math.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create random samples.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.Random(BlueHeron.Math.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create an infinite random sample sequence.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.RandomSingle(System.Int32,BlueHeron.Math.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create random samples.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.RandomSingle(BlueHeron.Math.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create an infinite random sample sequence.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.RandomComplex(System.Int32,BlueHeron.Math.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create random samples.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.RandomComplex(BlueHeron.Math.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create an infinite random sample sequence.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.RandomMap``1(System.Int32,BlueHeron.Math.Numerics.Distributions.IContinuousDistribution,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at samples from a probability distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.RandomMapSequence``1(BlueHeron.Math.Numerics.Distributions.IContinuousDistribution,System.Func{System.Double,``0})">
            <summary>
            Generate a sample sequence by sampling a function at samples from a probability distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.RandomMap2``1(System.Int32,BlueHeron.Math.Numerics.Distributions.IContinuousDistribution,System.Func{System.Double,System.Double,``0})">
            <summary>
            Generate samples by sampling a function at sample pairs from a probability distribution.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Generate.RandomMap2Sequence``1(BlueHeron.Math.Numerics.Distributions.IContinuousDistribution,System.Func{System.Double,System.Double,``0})">
            <summary>
            Generate a sample sequence by sampling a function at sample pairs from a probability distribution.
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Polynomial">
            <summary>
            A single-variable polynomial with real-valued coefficients and non-negative exponents.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Polynomial.Coefficients">
            <summary>
            The coefficients of the polynomial in a
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Polynomial.VariableName">
            <summary>
            Only needed for the ToString method
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Polynomial.Degree">
            <summary>
            Degree of the polynomial, i.e. the largest monomial exponent. For example, the degree of y=x^2+x^5 is 5, for y=3 it is 0.
            The null-polynomial returns degree -1 because the correct degree, negative infinity, cannot be represented by integers.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.#ctor(System.Int32)">
            <summary>
            Create a zero-polynomial with a coefficient array of the given length.
            An array of length N can support polynomials of a degree of at most N-1.
            </summary>
            <param name="n">Length of the coefficient array</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.#ctor">
            <summary>
            Create a zero-polynomial
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.#ctor(System.Double)">
            <summary>
            Create a constant polynomial.
            Example: 3.0 -> "p : x -> 3.0"
            </summary>
            <param name="coefficient">The coefficient of the "x^0" monomial.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.#ctor(System.Double[])">
            <summary>
            Create a polynomial with the provided coefficients (in ascending order, where the index matches the exponent).
            Example: {5, 0, 2} -> "p : x -> 5 + 0 x^1 + 2 x^2".
            </summary>
            <param name="coefficients">Polynomial coefficients as array</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a polynomial with the provided coefficients (in ascending order, where the index matches the exponent).
            Example: {5, 0, 2} -> "p : x -> 5 + 0 x^1 + 2 x^2".
            </summary>
            <param name="coefficients">Polynomial coefficients as enumerable</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Evaluate(System.Double,System.Double[])">
            <summary>
            Evaluate a polynomial at point x.
            Coefficients are ordered ascending by power with power k at index k.
            Example: coefficients [3,-1,2] represent y=2x^2-x+3.
            </summary>
            <param name="z">The location where to evaluate the polynomial at.</param>
            <param name="coefficients">The coefficients of the polynomial, coefficient for power k at index k.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="coefficients"/> is a null reference.
            </exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Evaluate(System.Numerics.Complex,System.Double[])">
            <summary>
            Evaluate a polynomial at point x.
            Coefficients are ordered ascending by power with power k at index k.
            Example: coefficients [3,-1,2] represent y=2x^2-x+3.
            </summary>
            <param name="z">The location where to evaluate the polynomial at.</param>
            <param name="coefficients">The coefficients of the polynomial, coefficient for power k at index k.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="coefficients"/> is a null reference.
            </exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Evaluate(System.Numerics.Complex,System.Numerics.Complex[])">
            <summary>
            Evaluate a polynomial at point x.
            Coefficients are ordered ascending by power with power k at index k.
            Example: coefficients [3,-1,2] represent y=2x^2-x+3.
            </summary>
            <param name="z">The location where to evaluate the polynomial at.</param>
            <param name="coefficients">The coefficients of the polynomial, coefficient for power k at index k.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="coefficients"/> is a null reference.
            </exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Evaluate(System.Double)">
            <summary>
            Evaluate a polynomial at point x.
            </summary>
            <param name="z">The location where to evaluate the polynomial at.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Evaluate(System.Numerics.Complex)">
            <summary>
            Evaluate a polynomial at point x.
            </summary>
            <param name="z">The location where to evaluate the polynomial at.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Evaluate(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluate a polynomial at points z.
            </summary>
            <param name="z">The locations where to evaluate the polynomial at.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Evaluate(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Evaluate a polynomial at points z.
            </summary>
            <param name="z">The locations where to evaluate the polynomial at.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Add(BlueHeron.Math.Numerics.Polynomial,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Addition of two Polynomials (point-wise).
            </summary>
            <param name="a">Left Polynomial</param>
            <param name="b">Right Polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Add(BlueHeron.Math.Numerics.Polynomial,System.Double)">
            <summary>
            Addition of a polynomial and a scalar.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Subtract(BlueHeron.Math.Numerics.Polynomial,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Subtraction of two Polynomials (point-wise).
            </summary>
            <param name="a">Left Polynomial</param>
            <param name="b">Right Polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Subtract(BlueHeron.Math.Numerics.Polynomial,System.Double)">
            <summary>
            Addition of a scalar from a polynomial.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Subtract(System.Double,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Addition of a polynomial from a scalar.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Negate(BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Negation of a polynomial.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Multiply(BlueHeron.Math.Numerics.Polynomial,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Multiplies a polynomial by a polynomial (convolution)
            </summary>
            <param name="a">Left polynomial</param>
            <param name="b">Right polynomial</param>
            <returns>Resulting Polynomial</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="a"/> or <paramref name="b"/> is a null reference.
            </exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Multiply(BlueHeron.Math.Numerics.Polynomial,System.Double)">
            <summary>
            Scales a polynomial by a scalar
            </summary>
            <param name="a">Polynomial</param>
            <param name="k">Scalar value</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.Divide(BlueHeron.Math.Numerics.Polynomial,System.Double)">
            <summary>
            Scales a polynomial by division by a scalar
            </summary>
            <param name="a">Polynomial</param>
            <param name="k">Scalar value</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.DivideRemainder(BlueHeron.Math.Numerics.Polynomial,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Euclidean long division of two polynomials, returning the quotient q and remainder r of the two polynomials a and b such that a = q*b + r
            </summary>
            <param name="a">Left polynomial</param>
            <param name="b">Right polynomial</param>
            <returns>A tuple holding quotient in first and remainder in second</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.PointwiseDivide(BlueHeron.Math.Numerics.Polynomial,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Point-wise division of two Polynomials
            </summary>
            <param name="a">Left Polynomial</param>
            <param name="b">Right Polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.PointwiseMultiply(BlueHeron.Math.Numerics.Polynomial,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Point-wise multiplication of two Polynomials
            </summary>
            <param name="a">Left Polynomial</param>
            <param name="b">Right Polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.DivideRemainder(BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Division of two polynomials returning the quotient-with-remainder of the two polynomials given
            </summary>
            <param name="b">Right polynomial</param>
            <returns>A tuple holding quotient in first and remainder in second</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Addition(BlueHeron.Math.Numerics.Polynomial,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Addition of two Polynomials (piecewise)
            </summary>
            <param name="a">Left polynomial</param>
            <param name="b">Right polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Addition(BlueHeron.Math.Numerics.Polynomial,System.Double)">
            <summary>
            adds a scalar to a polynomial.
            </summary>
            <param name="a">Polynomial</param>
            <param name="k">Scalar value</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Addition(System.Double,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            adds a scalar to a polynomial.
            </summary>
            <param name="k">Scalar value</param>
            <param name="a">Polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Subtraction(BlueHeron.Math.Numerics.Polynomial,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Subtraction of two polynomial.
            </summary>
            <param name="a">Left polynomial</param>
            <param name="b">Right polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Subtraction(BlueHeron.Math.Numerics.Polynomial,System.Double)">
            <summary>
            Subtracts a scalar from a polynomial.
            </summary>
            <param name="a">Polynomial</param>
            <param name="k">Scalar value</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Subtraction(System.Double,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Subtracts a polynomial from a scalar.
            </summary>
            <param name="k">Scalar value</param>
            <param name="a">Polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_UnaryNegation(BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Negates a polynomial.
            </summary>
            <param name="a">Polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Multiply(BlueHeron.Math.Numerics.Polynomial,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Multiplies a polynomial by a polynomial (convolution).
            </summary>
            <param name="a">Left polynomial</param>
            <param name="b">Right polynomial</param>
            <returns>resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Multiply(BlueHeron.Math.Numerics.Polynomial,System.Double)">
            <summary>
            Multiplies a polynomial by a scalar.
            </summary>
            <param name="a">Polynomial</param>
            <param name="k">Scalar value</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Multiply(System.Double,BlueHeron.Math.Numerics.Polynomial)">
            <summary>
            Multiplies a polynomial by a scalar.
            </summary>
            <param name="k">Scalar value</param>
            <param name="a">Polynomial</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.op_Division(BlueHeron.Math.Numerics.Polynomial,System.Double)">
            <summary>
            Divides a polynomial by scalar value.
            </summary>
            <param name="a">Polynomial</param>
            <param name="k">Scalar value</param>
            <returns>Resulting Polynomial</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.ToString">
            <summary>
            Format the polynomial in ascending order, e.g. "4.3 + 2.0x^2 - x^3".
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.ToStringDescending">
            <summary>
            Format the polynomial in descending order, e.g. "x^3 + 2.0x^2 - 4.3".
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.ToString(System.String)">
            <summary>
            Format the polynomial in ascending order, e.g. "4.3 + 2.0x^2 - x^3".
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.ToStringDescending(System.String)">
            <summary>
            Format the polynomial in descending order, e.g. "x^3 + 2.0x^2 - 4.3".
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.ToString(System.IFormatProvider)">
            <summary>
            Format the polynomial in ascending order, e.g. "4.3 + 2.0x^2 - x^3".
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.ToStringDescending(System.IFormatProvider)">
            <summary>
            Format the polynomial in descending order, e.g. "x^3 + 2.0x^2 - 4.3".
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.ToString(System.String,System.IFormatProvider)">
            <summary>
            Format the polynomial in ascending order, e.g. "4.3 + 2.0x^2 - x^3".
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.ToStringDescending(System.String,System.IFormatProvider)">
            <summary>
            Format the polynomial in descending order, e.g. "x^3 + 2.0x^2 - 4.3".
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Polynomial.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Precision">
            <summary>
            Utilities for working with floating point numbers.
            </summary>
            <remarks>
            <para>
            Useful links:
            <list type="bullet">
            <item>
            http://docs.sun.com/source/806-3568/ncg_goldberg.html#689 - What every computer scientist should know about floating-point arithmetic
            </item>
            <item>
            http://en.wikipedia.org/wiki/Machine_epsilon - Gives the definition of machine epsilon
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.CompareTo(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines which double is bigger.
            a &lt; b -> -1; a ~= b (almost equal according to parameter) -> 0; a &gt; b -> +1.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumAbsoluteError">The absolute accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.CompareTo(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines which double is bigger.
            a &lt; b -> -1; a ~= b (almost equal according to parameter) -> 0; a &gt; b -> +1.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places on which the values must be compared. Must be 1 or larger.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.CompareToRelative(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines which double is bigger.
            a &lt; b -> -1; a ~= b (almost equal according to parameter) -> 0; a &gt; b -> +1.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The relative accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.CompareToRelative(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines which double is bigger.
            a &lt; b -> -1; a ~= b (almost equal according to parameter) -> 0; a &gt; b -> +1.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places on which the values must be compared. Must be 1 or larger.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.CompareToNumbersBetween(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines which double is bigger.
            a &lt; b -> -1; a ~= b (almost equal according to parameter) -> 0; a &gt; b -> +1.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum error in terms of Units in Last Place (<c>ulps</c>), i.e. the maximum number of decimals that may be different. Must be 1 or larger.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLarger(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLarger(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLarger(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumAbsoluteError">The absolute accuracy required for being almost equal.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLarger(System.Single,System.Single,System.Double)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumAbsoluteError">The absolute accuracy required for being almost equal.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLargerRelative(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLargerRelative(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLargerRelative(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The relative accuracy required for being almost equal.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLargerRelative(System.Single,System.Single,System.Double)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The relative accuracy required for being almost equal.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLargerNumbersBetween(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsLargerNumbersBetween(System.Single,System.Single,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmaller(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by
            two so that we have half the range on each side of th<paramref name="decimalPlaces"/>g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmaller(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by
            two so that we have half the range on each side of th<paramref name="decimalPlaces"/>g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmaller(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumAbsoluteError">The absolute accuracy required for being almost equal.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmaller(System.Single,System.Single,System.Double)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumAbsoluteError">The absolute accuracy required for being almost equal.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmallerRelative(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmallerRelative(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmallerRelative(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The relative accuracy required for being almost equal.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmallerRelative(System.Single,System.Single,System.Double)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The relative accuracy required for being almost equal.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmallerNumbersBetween(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsSmallerNumbersBetween(System.Single,System.Single,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.IsFinite(System.Double)">
            <summary>
            Checks if a given double values is finite, i.e. neither NaN nor inifnity
            </summary>
            <param name="value">The value to be checked fo finitenes.</param>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.DoubleWidth">
            <summary>
            The number of binary digits used to represent the binary number for a double precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.SingleWidth">
            <summary>
            The number of binary digits used to represent the binary number for a single precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.DoublePrecision">
            <summary>
            Standard epsilon, the maximum relative precision of IEEE 754 double-precision floating numbers (64 bit).
            According to the definition of Prof. Demmel and used in LAPACK and Scilab.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.PositiveDoublePrecision">
            <summary>
            Standard epsilon, the maximum relative precision of IEEE 754 double-precision floating numbers (64 bit).
            According to the definition of Prof. Higham and used in the ISO C standard and MATLAB.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.SinglePrecision">
            <summary>
            Standard epsilon, the maximum relative precision of IEEE 754 single-precision floating numbers (32 bit).
            According to the definition of Prof. Demmel and used in LAPACK and Scilab.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.PositiveSinglePrecision">
            <summary>
            Standard epsilon, the maximum relative precision of IEEE 754 single-precision floating numbers (32 bit).
            According to the definition of Prof. Higham and used in the ISO C standard and MATLAB.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.MachineEpsilon">
            <summary>
            Actual double precision machine epsilon, the smallest number that can be subtracted from 1, yielding a results different than 1.
            This is also known as unit roundoff error. According to the definition of Prof. Demmel.
            On a standard machine this is equivalent to `DoublePrecision`.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.PositiveMachineEpsilon">
            <summary>
            Actual double precision machine epsilon, the smallest number that can be added to 1, yielding a results different than 1.
            This is also known as unit roundoff error. According to the definition of Prof. Higham.
            On a standard machine this is equivalent to `PositiveDoublePrecision`.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.DoubleDecimalPlaces">
            <summary>
            The number of significant decimal places of double-precision floating numbers (64 bit).
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.SingleDecimalPlaces">
            <summary>
            The number of significant decimal places of single-precision floating numbers (32 bit).
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.DefaultDoubleAccuracy">
            <summary>
            Value representing 10 * 2^(-53) = 1.11022302462516E-15
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Precision.DefaultSingleAccuracy">
            <summary>
            Value representing 10 * 2^(-24) = 5.96046447753906E-07
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Magnitude(System.Double)">
            <summary>
            Returns the magnitude of the number.
            </summary>
            <param name="value">The value.</param>
            <returns>The magnitude of the number.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Magnitude(System.Single)">
            <summary>
            Returns the magnitude of the number.
            </summary>
            <param name="value">The value.</param>
            <returns>The magnitude of the number.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ScaleUnitMagnitude(System.Double)">
            <summary>
            Returns the number divided by it's magnitude, effectively returning a number between -10 and 10.
            </summary>
            <param name="value">The value.</param>
            <returns>The value of the number.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AsDirectionalInt64(System.Double)">
            <summary>
            Returns a 'directional' long value. This is a long value which acts the same as a double,
            e.g. a negative double value will return a negative double value starting at 0 and going
            more negative as the double value gets more negative.
            </summary>
            <param name="value">The input double value.</param>
            <returns>A long value which is roughly the equivalent of the double value.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AsDirectionalInt32(System.Single)">
            <summary>
            Returns a 'directional' int value. This is a int value which acts the same as a float,
            e.g. a negative float value will return a negative int value starting at 0 and going
            more negative as the float value gets more negative.
            </summary>
            <param name="value">The input float value.</param>
            <returns>An int value which is roughly the equivalent of the double value.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Increment(System.Double,System.Int32)">
            <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
            <param name="value">The value which needs to be incremented.</param>
            <param name="count">How many times the number should be incremented.</param>
            <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
            <returns>The next larger floating point value.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Decrement(System.Double,System.Int32)">
            <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
            <param name="value">The value which should be decremented.</param>
            <param name="count">How many times the number should be decremented.</param>
            <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
            <returns>The next smaller floating point value.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.CoerceZero(System.Double,System.Int32)">
            <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <param name="maxNumbersBetween">The maximum count of numbers between the zero and the number <paramref name="a"/>.</param>
            <returns>
                Zero if |<paramref name="a"/>| is fewer than <paramref name="maxNumbersBetween"/> numbers from zero, <paramref name="a"/> otherwise.
            </returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.CoerceZero(System.Double,System.Int64)">
            <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <param name="maxNumbersBetween">The maximum count of numbers between the zero and the number <paramref name="a"/>.</param>
            <returns>
                Zero if |<paramref name="a"/>| is fewer than <paramref name="maxNumbersBetween"/> numbers from zero, <paramref name="a"/> otherwise.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.CoerceZero(System.Double,System.Double)">
            <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <param name="maximumAbsoluteError">The absolute threshold for <paramref name="a"/> to consider it as zero.</param>
            <returns>Zero if |<paramref name="a"/>| is smaller than <paramref name="maximumAbsoluteError"/>, <paramref name="a"/> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maximumAbsoluteError"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.CoerceZero(System.Double)">
            <summary>
            Forces small numbers near zero to zero.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <returns>Zero if |<paramref name="a"/>| is smaller than 2^(-53) = 1.11e-16, <paramref name="a"/> otherwise.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.RangeOfMatchingFloatingPointNumbers(System.Double,System.Int64)">
            <summary>
            Determines the range of floating point numbers that will match the specified value with the given tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween"/> is smaller than zero.
            </exception>
            <returns>Tuple of the bottom and top range ends.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.MaximumMatchingFloatingPointNumber(System.Double,System.Int64)">
            <summary>
            Returns the floating point number that will match the value with the tolerance on the maximum size (i.e. the result is
            always bigger than the value)
            </summary>
            <param name="value">The value.</param>
            <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
            <returns>The maximum floating point number which is <paramref name="maxNumbersBetween"/> larger than the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.MinimumMatchingFloatingPointNumber(System.Double,System.Int64)">
            <summary>
            Returns the floating point number that will match the value with the tolerance on the minimum size (i.e. the result is
            always smaller than the value)
            </summary>
            <param name="value">The value.</param>
            <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
            <returns>The minimum floating point number which is <paramref name="maxNumbersBetween"/> smaller than the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.RangeOfMatchingNumbers(System.Double,System.Double)">
            <summary>
            Determines the range of <c>ulps</c> that will match the specified value with the given tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="relativeDifference">The relative difference.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="relativeDifference"/> is smaller than zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value"/> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value"/> is <c>double.NaN</c>.
            </exception>
            <returns>
            Tuple with the number of ULPS between the <c>value</c> and the <c>value - relativeDifference</c> as first,
            and the number of ULPS between the <c>value</c> and the <c>value + relativeDifference</c> as second value.
            </returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.NumbersBetween(System.Double,System.Double)">
            <summary>
            Evaluates the count of numbers between two double numbers
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <remarks>The second number is included in the number, thus two equal numbers evaluate to zero and two neighbor numbers evaluate to one. Therefore, what is returned is actually the count of numbers between plus 1.</remarks>
            <returns>The number of floating point values between <paramref name="a"/> and <paramref name="b"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="a"/> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="a"/> is <c>double.NaN</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="b"/> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="b"/> is <c>double.NaN</c>.
            </exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.EpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <param name="value">The value used to determine the minimum distance.</param>
            <returns>
            Relative Epsilon (positive double or NaN).
            </returns>
            <remarks>Evaluates the <b>negative</b> epsilon. The more common positive epsilon is equal to two times this negative epsilon.</remarks>
            <seealso cref="M:BlueHeron.Math.Numerics.Precision.PositiveEpsilonOf(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.EpsilonOf(System.Single)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <param name="value">The value used to determine the minimum distance.</param>
            <returns>
            Relative Epsilon (positive float or NaN).
            </returns>
            <remarks>Evaluates the <b>negative</b> epsilon. The more common positive epsilon is equal to two times this negative epsilon.</remarks>
            <seealso cref="M:BlueHeron.Math.Numerics.Precision.PositiveEpsilonOf(System.Single)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.PositiveEpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <param name="value">The value used to determine the minimum distance.</param>
            <returns>Relative Epsilon (positive double or NaN)</returns>
            <remarks>Evaluates the <b>positive</b> epsilon. See also <see cref="M:BlueHeron.Math.Numerics.Precision.EpsilonOf(System.Double)"/></remarks>
            <seealso cref="M:BlueHeron.Math.Numerics.Precision.EpsilonOf(System.Double)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.PositiveEpsilonOf(System.Single)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <param name="value">The value used to determine the minimum distance.</param>
            <returns>Relative Epsilon (positive float or NaN)</returns>
            <remarks>Evaluates the <b>positive</b> epsilon. See also <see cref="M:BlueHeron.Math.Numerics.Precision.EpsilonOf(System.Single)"/></remarks>
            <seealso cref="M:BlueHeron.Math.Numerics.Precision.EpsilonOf(System.Single)"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.MeasureMachineEpsilon">
            <summary>
            Calculates the actual (negative) double precision machine epsilon - the smallest number that can be subtracted from 1, yielding a results different than 1.
            This is also known as unit roundoff error. According to the definition of Prof. Demmel.
            </summary>
            <returns>Positive Machine epsilon</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.MeasurePositiveMachineEpsilon">
            <summary>
            Calculates the actual positive double precision machine epsilon - the smallest number that can be added to 1, yielding a results different than 1.
            This is also known as unit roundoff error. According to the definition of Prof. Higham.
            </summary>
            <returns>Machine epsilon</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.RoundToMultiple(System.Double,System.Double)">
            <summary>
            Round to a multiple of the provided positive basis.
            </summary>
            <param name="number">Number to be rounded.</param>
            <param name="basis">The basis to whose multiples to round to. Must be positive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.RoundToMultiple(System.Single,System.Single)">
            <summary>
            Round to a multiple of the provided positive basis.
            </summary>
            <param name="number">Number to be rounded.</param>
            <param name="basis">The basis to whose multiples to round to. Must be positive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.RoundToMultiple(System.Decimal,System.Decimal)">
            <summary>
            Round to a multiple of the provided positive basis.
            </summary>
            <param name="number">Number to be rounded.</param>
            <param name="basis">The basis to whose multiples to round to. Must be positive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.RoundToPower(System.Double,System.Double)">
            <summary>
            Round to a multiple of the provided positive basis.
            </summary>
            <param name="number">Number to be rounded.</param>
            <param name="basis">The basis to whose powers to round to. Must be positive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.RoundToPower(System.Single,System.Single)">
            <summary>
            Round to a multiple of the provided positive basis.
            </summary>
            <param name="number">Number to be rounded.</param>
            <param name="basis">The basis to whose powers to round to. Must be positive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.Double,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.Single,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.Decimal,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.Int32,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.UInt32,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.Int64,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.UInt64,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.Int16,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.UInt16,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.Round(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Round to the number closest to 10^(-decimals). Negative decimals to round within the integer part.
            </summary>
            <param name="number">Number to be rounded</param>
            <param name="digits">If positive the number of decimals to round to. If negative the number of digits within the integer part to round, e.g. -3 will wound to the closes 1000.</param>
            <example>To round 123456789 to hundreds Round(123456789, -2) = 123456800 </example>
            <returns>Rounded number</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNorm(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal
            within the specified maximum absolute error.
            </summary>
            <param name="a">The norm of the first value (can be negative).</param>
            <param name="b">The norm of the second value (can be negative).</param>
            <param name="diff">The norm of the difference of the two values (can be negative).</param>
            <param name="maximumAbsoluteError">The absolute accuracy required for being almost equal.</param>
            <returns>True if both doubles are almost equal up to the specified maximum absolute error, false otherwise.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNorm``1(``0,``0,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal
            within the specified maximum absolute error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumAbsoluteError">The absolute accuracy required for being almost equal.</param>
            <returns>True if both doubles are almost equal up to the specified maximum absolute error, false otherwise.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNormRelative(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal
            within the specified maximum error.
            </summary>
            <param name="a">The norm of the first value (can be negative).</param>
            <param name="b">The norm of the second value (can be negative).</param>
            <param name="diff">The norm of the difference of the two values (can be negative).</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
            <returns>True if both doubles are almost equal up to the specified maximum error, false otherwise.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNormRelative``1(``0,``0,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal
            within the specified maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
            <returns>True if both doubles are almost equal up to the specified maximum error, false otherwise.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqual(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within
            the specified maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumAbsoluteError">The accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqual(System.Single,System.Single,System.Double)">
            <summary>
            Compares two complex and determines if they are equal within
            the specified maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumAbsoluteError">The accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualRelative(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within
            the specified maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualRelative(System.Single,System.Single,System.Double)">
            <summary>
            Compares two complex and determines if they are equal within
            the specified maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqual(System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqual(System.Single,System.Single)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualRelative(System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualRelative(System.Single,System.Single)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNorm(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not, using the
            number of decimal places as an absolute measure.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 0.5e-decimalPlaces. We divide by
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The norm of the first value (can be negative).</param>
            <param name="b">The norm of the second value (can be negative).</param>
            <param name="diff">The norm of the difference of the two values (can be negative).</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNorm``1(``0,``0,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not, using the
            number of decimal places as an absolute measure.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 0.5e-decimalPlaces. We divide by
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNormRelative(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The norm of the first value (can be negative).</param>
            <param name="b">The norm of the second value (can be negative).</param>
            <param name="diff">The norm of the difference of the two values (can be negative).</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="decimalPlaces"/> is smaller than zero.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNormRelative``1(``0,``0,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqual(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not, using the
            number of decimal places as an absolute measure.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqual(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not, using the
            number of decimal places as an absolute measure.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualRelative(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualRelative(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNumbersBetween(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if they are equal to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <remarks>
            <para>
            Determines the 'number' of floating point numbers between two values (i.e. the number of discrete steps
            between the two numbers) and then checks if that is within the specified tolerance. So if a tolerance
            of 1 is passed then the result will be true only if the two numbers have the same binary representation
            OR if they are two adjacent numbers that only differ by one step.
            </para>
            <para>
            The comparison method used is explained in http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm . The article
            at http://www.extremeoptimization.com/resources/Articles/FPDotNetConceptsAndFormats.aspx explains how to transform the C code to
            .NET enabled code without using pointers and unsafe code.
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values between the two values. Must be 1 or larger.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maxNumbersBetween"/> is smaller than one.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.AlmostEqualNumbersBetween(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two floats and determines if they are equal to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values between the two values. Must be 1 or larger.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maxNumbersBetween"/> is smaller than one.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqual(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="maximumAbsoluteError">The accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqual(System.Collections.Generic.IList{System.Single},System.Collections.Generic.IList{System.Single},System.Double)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="maximumAbsoluteError">The accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqualRelative(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqualRelative(System.Collections.Generic.IList{System.Single},System.Collections.Generic.IList{System.Single},System.Double)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqual(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqual(System.Collections.Generic.IList{System.Single},System.Collections.Generic.IList{System.Single},System.Int32)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqualRelative(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqualRelative(System.Collections.Generic.IList{System.Single},System.Collections.Generic.IList{System.Single},System.Int32)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqualNorm``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="maximumAbsoluteError">The accuracy required for being almost equal.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Precision.ListAlmostEqualNormRelative``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
        </member>
        <member name="T:BlueHeron.Math.Numerics.IPrecisionSupport`1">
            <summary>
            Support Interface for Precision Operations (like AlmostEquals).
            </summary>
            <typeparam name="T">Type of the implementing class.</typeparam>
        </member>
        <member name="M:BlueHeron.Math.Numerics.IPrecisionSupport`1.Norm">
            <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
            <returns>A norm of this value.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.IPrecisionSupport`1.NormOfDifference(`0)">
            <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
            <param name="otherValue">The value to compare with.</param>
            <returns>A norm of the difference between this and the other value.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Random.RandomExtensions">
            <summary>
            This class implements extension methods for the System.Random class.
            The extension methods generate pseudo-random distributed numbers for types other than double and int32.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextDoubles(System.Random,System.Double[])">
            <summary>
            Fills an array with uniform random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
            <param name="rnd">The random number generator.</param>
            <param name="values">The array to fill with random values.</param>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextDoubles(System.Random,System.Int32)">
            <summary>
            Returns an array of uniform random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
            <param name="rnd">The random number generator.</param>
            <param name="count">The size of the array to fill.</param>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextDoubleSequence(System.Random)">
            <summary>
            Returns an infinite sequence of uniform random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
            Returns an array of uniform random bytes.
            </summary>
            <param name="rnd">The random number generator.</param>
            <param name="count">The size of the array to fill.</param>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextInt32s(System.Random,System.Int32[])">
            <summary>
            Fills an array with uniform random 32-bit signed integers greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <param name="rnd">The random number generator.</param>
            <param name="values">The array to fill with random values.</param>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextInt32s(System.Random,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Fills an array with uniform random 32-bit signed integers within the specified range.
            </summary>
            <param name="rnd">The random number generator.</param>
            <param name="values">The array to fill with random values.</param>
            <param name="minInclusive">Lower bound, inclusive.</param>
            <param name="maxExclusive">Upper bound, exclusive.</param>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextInt32Sequence(System.Random,System.Int32,System.Int32)">
            <summary>
            Returns an infinite sequence of uniform random 32-bit signed integers within the specified range.
            </summary>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextBigIntegerSequence(System.Random,System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Returns an infinite sequence of uniform random <see cref="T:System.Numerics.BigInteger"/> within the specified range.
            </summary>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextInt64(System.Random)">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int64.MaxValue"/>.
            </summary>
            <param name="rnd">The random number generator.</param>
            <returns>
            A 64-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int64.MaxValue"/>; that is,
            the range of return values includes 0 but not <see cref="F:System.Int64.MaxValue"/>.
            </returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextFullRangeInt64(System.Random)"/>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextFullRangeInt32(System.Random)">
            <summary>
            Returns a random number of the full Int32 range.
            </summary>
            <param name="rnd">The random number generator.</param>
            <returns>
            A 32-bit signed integer of the full range, including 0, negative numbers,
            <see cref="F:System.Int32.MaxValue"/> and <see cref="F:System.Int32.MinValue"/>.
            </returns>
            <seealso cref="M:System.Random.Next"/>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextFullRangeInt64(System.Random)">
            <summary>
            Returns a random number of the full Int64 range.
            </summary>
            <param name="rnd">The random number generator.</param>
            <returns>
            A 64-bit signed integer of the full range, including 0, negative numbers,
            <see cref="F:System.Int64.MaxValue"/> and <see cref="F:System.Int64.MinValue"/>.
            </returns>
            <seealso cref="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextInt64(System.Random)"/>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextDecimal(System.Random)">
            <summary>
            Returns a nonnegative decimal floating point random number less than 1.0.
            </summary>
            <param name="rnd">The random number generator.</param>
            <returns>
            A decimal floating point number greater than or equal to 0.0, and less than 1.0; that is,
            the range of return values includes 0.0 but not 1.0.
            </returns>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomExtensions.NextBoolean(System.Random)">
            <summary>
            Returns a random boolean.
            </summary>
            <param name="rnd">The random number generator.</param>
            <remarks>
            This extension is thread-safe if and only if called on an random number
            generator provided by Math.NET Numerics or derived from the RandomSource class.
            </remarks>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Random.RandomSeed">
            <summary>
            Random seed value provider.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSeed.Time">
            <summary>
            Provides a time-dependent seed value, matching the default behavior of System.Random.
            WARNING: There is no randomness in this seed and quick repeated calls can cause the same seed value.
            Do not use for cryptography!
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSeed.Guid">
            <summary>
            Provides a seed based on time and unique GUIDs.
            WARNING: There is only low randomness in this seed, but at least quick repeated calls will result in different seed values.
            Do not use for cryptography!
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSeed.Robust">
            <summary>
            Provides a seed based on an internal random number generator (crypto if available), time and unique GUIDs.
            WARNING: There is only medium randomness in this seed, but quick repeated calls will result in different seed values.
            Do not use for cryptography!
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Random.RandomSource">
            <summary>
            Base class for random number generators.
            This class introduces a layer between <see cref="T:System.Random"/> and the Math.NET Numerics random number generators to provide thread safety.
            When used directly it use the <see cref="T:System.Random"/> as random number source.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlueHeron.Math.Numerics.Random.RandomSource"/> class using the value of <see cref="P:BlueHeron.Math.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to set whether the instance is thread safe or not.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BlueHeron.Math.Numerics.Random.RandomSource"/> class.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
            <remarks>Thread safe instances are two and half times slower than non-thread
            safe classes.</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextDoubles(System.Double[])">
            <summary>
            Fills an array with uniform random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
            <param name="values">The array to fill with random values.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextDoubles(System.Int32)">
            <summary>
            Returns an array of uniform random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
            <param name="count">The size of the array to fill.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextDoubleSequence">
            <summary>
            Returns an infinite sequence of uniform random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.Next">
            <summary>
            Returns a random 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.Next(System.Int32)">
            <summary>
            Returns a random number less then a specified maximum.
            </summary>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive ≥ 1.</param>
            <returns>A 32-bit signed integer less than <paramref name="maxExclusive"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxExclusive"/> is zero or negative.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minInclusive">The inclusive lower bound of the random number returned.</param>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive > minExclusive.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minInclusive"/> and less than <paramref name="maxExclusive"/>; that is, the range of return values includes <paramref name="minInclusive"/> but not <paramref name="maxExclusive"/>. If <paramref name="minInclusive"/> equals <paramref name="maxExclusive"/>, <paramref name="minInclusive"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minInclusive"/> is greater than <paramref name="maxExclusive"/>. </exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextInt32s(System.Int32[])">
            <summary>
            Fills an array with random 32-bit signed integers greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <param name="values">The array to fill with random values.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextInt32s(System.Int32)">
            <summary>
            Returns an array with random 32-bit signed integers greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <param name="count">The size of the array to fill.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextInt32s(System.Int32[],System.Int32)">
            <summary>
            Fills an array with random numbers within a specified range.
            </summary>
            <param name="values">The array to fill with random values.</param>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive ≥ 1.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextInt32s(System.Int32,System.Int32)">
            <summary>
            Returns an array with random 32-bit signed integers within the specified range.
            </summary>
            <param name="count">The size of the array to fill.</param>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive ≥ 1.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextInt32s(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Fills an array with random numbers within a specified range.
            </summary>
            <param name="values">The array to fill with random values.</param>
            <param name="minInclusive">The inclusive lower bound of the random number returned.</param>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive > minExclusive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextInt32s(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an array with random 32-bit signed integers within the specified range.
            </summary>
            <param name="count">The size of the array to fill.</param>
            <param name="minInclusive">The inclusive lower bound of the random number returned.</param>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive > minExclusive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextInt32Sequence">
            <summary>
            Returns an infinite sequence of random 32-bit signed integers greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextInt32Sequence(System.Int32,System.Int32)">
            <summary>
            Returns an infinite sequence of random numbers within a specified range.
            </summary>
            <param name="minInclusive">The inclusive lower bound of the random number returned.</param>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive > minExclusive.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.Sample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.DoSample">
            <summary>
            Returns a random double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.DoSampleInteger">
            <summary>
            Returns a random 32-bit signed integer greater than or equal to zero and less than 2147483647 (<see cref="F:System.Int32.MaxValue"/>).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.DoSampleBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers in full range, including zero and 255 (<see cref="F:System.Byte.MaxValue"/>).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.DoSampleInt32WithNBits(System.Int32)">
            <summary>
            Returns a random N-bit signed integer greater than or equal to zero and less than 2^N.
            N (bit count) is expected to be greater than zero and less than 32 (not verified).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.DoSampleInt64WithNBits(System.Int32)">
            <summary>
            Returns a random N-bit signed long integer greater than or equal to zero and less than 2^N.
            N (bit count) is expected to be greater than zero and less than 64 (not verified).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.DoSampleInteger(System.Int32)">
            <summary>
            Returns a random 32-bit signed integer within the specified range.
            </summary>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive ≥ 2 (not verified, must be ensured by caller).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.RandomSource.DoSampleInteger(System.Int32,System.Int32)">
            <summary>
            Returns a random 32-bit signed integer within the specified range.
            </summary>
            <param name="minInclusive">The inclusive lower bound of the random number returned.</param>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive ≥ minExclusive + 2 (not verified, must be ensured by caller).</param>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Random.SystemRandomSource">
            <summary>
            A random number generator based on the <see cref="T:System.Random"/> class in the .NET library.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.#ctor">
            <summary>
            Construct a new random number generator with a random seed.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.#ctor(System.Boolean)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.#ctor(System.Int32)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <param name="seed">The seed value.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.#ctor(System.Int32,System.Boolean)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Random.SystemRandomSource.Default">
            <summary>
            Default instance, thread-safe.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.DoSample">
            <summary>
            Returns a random double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.DoSampleInteger">
            <summary>
            Returns a random 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.DoSampleInteger(System.Int32)">
            <summary>
            Returns a random 32-bit signed integer within the specified range.
            </summary>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive ≥ 2 (not verified, must be ensured by caller).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.DoSampleInteger(System.Int32,System.Int32)">
            <summary>
            Returns a random 32-bit signed integer within the specified range.
            </summary>
            <param name="minInclusive">The inclusive lower bound of the random number returned.</param>
            <param name="maxExclusive">The exclusive upper bound of the random number returned. Range: maxExclusive ≥ minExclusive + 2 (not verified, must be ensured by caller).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.DoSampleBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers in full range, including zero and 255 (<see cref="F:System.Byte.MaxValue"/>).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.FastDoubles(System.Double[])">
            <summary>
            Fill an array with uniform random numbers greater than or equal to 0.0 and less than 1.0.
            WARNING: potentially very short random sequence length, can generate repeated partial sequences.
            </summary>
            <remarks>Parallelized on large length, but also supports being called in parallel from multiple threads</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.FastDoubles(System.Int32)">
            <summary>
            Returns an array of uniform random numbers greater than or equal to 0.0 and less than 1.0.
            WARNING: potentially very short random sequence length, can generate repeated partial sequences.
            </summary>
            <remarks>Parallelized on large length, but also supports being called in parallel from multiple threads</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.DoubleSequence">
            <summary>
            Returns an infinite sequence of uniform random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
            <remarks>Supports being called in parallel from multiple threads, but the result must be enumerated from a single thread each.</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.Doubles(System.Double[],System.Int32)">
            <summary>
            Fills an array with random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
            <remarks>Supports being called in parallel from multiple threads.</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.Doubles(System.Int32,System.Int32)">
            <summary>
            Returns an array of random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
            <remarks>Supports being called in parallel from multiple threads.</remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Random.SystemRandomSource.DoubleSequence(System.Int32)">
            <summary>
            Returns an infinite sequence of random numbers greater than or equal to 0.0 and less than 1.0.
            </summary>
            <remarks>Supports being called in parallel from multiple threads, but the result must be enumerated from a single thread each.</remarks>
        </member>
        <member name="T:BlueHeron.Math.Numerics.RootFinding.Brent">
            <summary>
            Algorithm by Brent, Van Wijngaarden, Dekker et al.
            Implementation inspired by Press, Teukolsky, Vetterling, and Flannery, "Numerical Recipes in C", 2nd edition, Cambridge University Press.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.RootFinding.Brent.FindRootExpand(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="guessLowerBound">Guess for the low value of the range where the root is supposed to be. Will be expanded if needed.</param>
            <param name="guessUpperBound">Guess for the  high value of the range where the root is supposed to be. Will be expanded if needed.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Default 1e-8. Must be greater than 0.</param>
            <param name="maxIterations">Maximum number of iterations. Default 100.</param>
            <param name="expandFactor">Factor at which to expand the bounds, if needed. Default 1.6.</param>
            <param name="maxExpandIteratons">Maximum number of expand iterations. Default 100.</param>
            <returns>Returns the root with the specified accuracy.</returns>
            <exception cref="T:BlueHeron.Math.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.RootFinding.Brent.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Default 1e-8. Must be greater than 0.</param>
            <param name="maxIterations">Maximum number of iterations. Default 100.</param>
            <returns>Returns the root with the specified accuracy.</returns>
            <exception cref="T:BlueHeron.Math.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.RootFinding.Brent.TryFindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Must be greater than 0.</param>
            <param name="maxIterations">Maximum number of iterations. Usually 100.</param>
            <param name="root">The root that was found, if any. Undefined if the function returns false.</param>
            <returns>True if a root with the specified accuracy was found, else false.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.RootFinding.Brent.Sign(System.Double,System.Double)">
            <summary>Helper method useful for preventing rounding errors.</summary>
            <returns>a*sign(b)</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.RootFinding.ZeroCrossingBracketing.Expand(System.Func{System.Double,System.Double},System.Double@,System.Double@,System.Double,System.Int32)">
            <summary>Detect a range containing at least one root.</summary>
            <param name="f">The function to detect roots from.</param>
            <param name="lowerBound">Lower value of the range.</param>
            <param name="upperBound">Upper value of the range</param>
            <param name="factor">The growing factor of research. Usually 1.6.</param>
            <param name="maxIterations">Maximum number of iterations. Usually 50.</param>
            <returns>True if the bracketing operation succeeded, false otherwise.</returns>
            <remarks>This iterative methods stops when two values with opposite signs are found.</remarks>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Sorting">
            <summary>
            Sorting algorithms for single, tuple and triple lists.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys, in place using the quick sort algorithm using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of elements in the key list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.Sort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements in the key list.</typeparam>
            <typeparam name="TItem">The type of elements in the item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items">List to permute the same way as the key list.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.Sort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys, items1 and items2 with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements in the key list.</typeparam>
            <typeparam name="TItem1">The type of elements in the first item list.</typeparam>
            <typeparam name="TItem2">The type of elements in the second item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items1">First list to permute the same way as the key list.</param>
            <param name="items2">Second list to permute the same way as the key list.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a range of a list of keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of element in the list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.Sort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements in the key list.</typeparam>
            <typeparam name="TItem">The type of elements in the item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items">List to permute the same way as the key list.</param>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.Sort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys, items1 and items2 with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements in the key list.</typeparam>
            <typeparam name="TItem1">The type of elements in the first item list.</typeparam>
            <typeparam name="TItem2">The type of elements in the second item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items1">First list to permute the same way as the key list.</param>
            <param name="items2">Second list to permute the same way as the key list.</param>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.SortAll``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="T1">The type of elements in the primary list.</typeparam>
            <typeparam name="T2">The type of elements in the secondary list.</typeparam>
            <param name="primary">List to sort.</param>
            <param name="secondary">List to sort on duplicate primary items, and permute the same way as the key list.</param>
            <param name="primaryComparer">Comparison, defining the primary sort order.</param>
            <param name="secondaryComparer">Comparison, defining the secondary sort order.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.QuickSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on a list.
            </summary>
            <typeparam name="T">The type of the list on which the quick sort is performed.</typeparam>
            <param name="keys">The list which is sorted using quick sort.</param>
            <param name="comparer">The method with which to compare two elements of the quick sort.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.QuickSort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on a list while reordering one other list accordingly.
            </summary>
            <typeparam name="T">The type of the list on which the quick sort is performed.</typeparam>
            <typeparam name="TItems">The type of the list which is automatically reordered accordingly.</typeparam>
            <param name="keys">The list which is sorted using quick sort.</param>
            <param name="items">The list which is automatically reordered accordingly.</param>
            <param name="comparer">The method with which to compare two elements of the quick sort.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.QuickSort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on one list while reordering two other lists accordingly.
            </summary>
            <typeparam name="T">The type of the list on which the quick sort is performed.</typeparam>
            <typeparam name="TItems1">The type of the first list which is automatically reordered accordingly.</typeparam>
            <typeparam name="TItems2">The type of the second list which is automatically reordered accordingly.</typeparam>
            <param name="keys">The list which is sorted using quick sort.</param>
            <param name="items1">The first list which is automatically reordered accordingly.</param>
            <param name="items2">The second list which is automatically reordered accordingly.</param>
            <param name="comparer">The method with which to compare two elements of the quick sort.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.QuickSortAll``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IComparer{``1},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on the primary and then by the secondary list while reordering one secondary list accordingly.
            </summary>
            <typeparam name="T1">The type of the primary list.</typeparam>
            <typeparam name="T2">The type of the secondary list.</typeparam>
            <param name="primary">The list which is sorted using quick sort.</param>
            <param name="secondary">The list which is sorted secondarily (on primary duplicates) and automatically reordered accordingly.</param>
            <param name="primaryComparer">The method with which to compare two elements of the primary list.</param>
            <param name="secondaryComparer">The method with which to compare two elements of the secondary list.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Sorting.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Performs an in place swap of two elements in a list.
            </summary>
            <typeparam name="T">The type of elements stored in the list.</typeparam>
            <param name="keys">The list in which the elements are stored.</param>
            <param name="a">The index of the first element of the swap.</param>
            <param name="b">The index of the second element of the swap.</param>
        </member>
        <member name="T:BlueHeron.Math.Numerics.SpecialFunctions">
            <summary>
            This partial implementation of the SpecialFunctions class contains all methods related to the error function.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.BetaLn(System.Double,System.Double)">
            <summary>
            Computes the logarithm of the Euler Beta function.
            </summary>
            <param name="z">The first Beta parameter, a positive real number.</param>
            <param name="w">The second Beta parameter, a positive real number.</param>
            <returns>The logarithm of the Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.Beta(System.Double,System.Double)">
            <summary>
            Computes the Euler Beta function.
            </summary>
            <param name="z">The first Beta parameter, a positive real number.</param>
            <param name="w">The second Beta parameter, a positive real number.</param>
            <returns>The Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.BetaIncomplete(System.Double,System.Double,System.Double)">
            <summary>
            Returns the lower incomplete (unregularized) beta function
            B(a,b,x) = int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
            <param name="a">The first Beta parameter, a positive real number.</param>
            <param name="b">The second Beta parameter, a positive real number.</param>
            <param name="x">The upper limit of the integral.</param>
            <returns>The lower incomplete (unregularized) beta function.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.BetaRegularized(System.Double,System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete beta function
            I_x(a,b) = 1/Beta(a,b) * int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
            <param name="a">The first Beta parameter, a positive real number.</param>
            <param name="b">The second Beta parameter, a positive real number.</param>
            <param name="x">The upper limit of the integral.</param>
            <returns>The regularized lower incomplete beta function.</returns>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpAn">
            <summary>
            **************************************
            COEFFICIENTS FOR METHOD ErfImp       *
            **************************************
            </summary>
            <summary> Polynomial coefficients for a numerator of ErfImp
            calculation for Erf(x) in the interval [1e-10, 0.5].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpAd">
            <summary> Polynomial coefficients for  a denominator of ErfImp
            calculation for Erf(x) in the interval [1e-10, 0.5].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpBn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [0.5, 0.75].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpBd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [0.5, 0.75].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpCn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [0.75, 1.25].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpCd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [0.75, 1.25].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpDn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [1.25, 2.25].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpDd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [1.25, 2.25].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpEn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [2.25, 3.5].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpEd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [2.25, 3.5].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpFn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [3.5, 5.25].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpFd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [3.5, 5.25].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpGn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [5.25, 8].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpGd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [5.25, 8].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpHn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [8, 11.5].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpHd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [8, 11.5].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpIn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [11.5, 17].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpId">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [11.5, 17].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpJn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [17, 24].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpJd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [17, 24].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpKn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [24, 38].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpKd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [24, 38].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpLn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [38, 60].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpLd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [38, 60].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpMn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [60, 85].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpMd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [60, 85].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpNn">
            <summary> Polynomial coefficients for a numerator in ErfImp
            calculation for Erfc(x) in the interval [85, 110].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErfImpNd">
            <summary> Polynomial coefficients for a denominator in ErfImp
            calculation for Erfc(x) in the interval [85, 110].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpAn">
            <summary>
            **************************************
            COEFFICIENTS FOR METHOD ErfInvImp    *
            **************************************
            </summary>
            <summary> Polynomial coefficients for a numerator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0, 0.5].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpAd">
            <summary> Polynomial coefficients for a denominator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0, 0.5].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpBn">
            <summary> Polynomial coefficients for a numerator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.5, 0.75].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpBd">
            <summary> Polynomial coefficients for a denominator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.5, 0.75].
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpCn">
            <summary> Polynomial coefficients for a numerator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x less than 3.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpCd">
            <summary> Polynomial coefficients for a denominator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x less than 3.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpDn">
            <summary> Polynomial coefficients for a numerator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x between 3 and 6.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpDd">
            <summary> Polynomial coefficients for a denominator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x between 3 and 6.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpEn">
            <summary> Polynomial coefficients for a numerator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x between 6 and 18.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpEd">
            <summary> Polynomial coefficients for a denominator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x between 6 and 18.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpFn">
            <summary> Polynomial coefficients for a numerator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x between 18 and 44.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpFd">
            <summary> Polynomial coefficients for a denominator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x between 18 and 44.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpGn">
            <summary> Polynomial coefficients for a numerator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x greater than 44.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.ErvInvImpGd">
            <summary> Polynomial coefficients for a denominator of ErfInvImp
            calculation for Erf^-1(z) in the interval [0.75, 1] with x greater than 44.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.Erf(System.Double)">
            <summary>Calculates the error function.</summary>
            <param name="x">The value to evaluate.</param>
            <returns>the error function evaluated at given value.</returns>
            <remarks>
                <list type="bullet">
                    <item>returns 1 if <c>x == double.PositiveInfinity</c>.</item>
                    <item>returns -1 if <c>x == double.NegativeInfinity</c>.</item>
                </list>
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.Erfc(System.Double)">
            <summary>Calculates the complementary error function.</summary>
            <param name="x">The value to evaluate.</param>
            <returns>the complementary error function evaluated at given value.</returns>
            <remarks>
                <list type="bullet">
                    <item>returns 0 if <c>x == double.PositiveInfinity</c>.</item>
                    <item>returns 2 if <c>x == double.NegativeInfinity</c>.</item>
                </list>
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.ErfInv(System.Double)">
            <summary>Calculates the inverse error function evaluated at z.</summary>
            <returns>The inverse error function evaluated at given value.</returns>
            <remarks>
              <list type="bullet">
                <item>returns double.PositiveInfinity if <c>z &gt;= 1.0</c>.</item>
                <item>returns double.NegativeInfinity if <c>z &lt;= -1.0</c>.</item>
              </list>
            </remarks>
            <summary>Calculates the inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the inverse error function evaluated at Z.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.ErfImp(System.Double,System.Boolean)">
            <summary>
            Implementation of the error function.
            </summary>
            <param name="z">Where to evaluate the error function.</param>
            <param name="invert">Whether to compute 1 - the error function.</param>
            <returns>the error function.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.ErfcInv(System.Double)">
            <summary>Calculates the complementary inverse error function evaluated at z.</summary>
            <returns>The complementary inverse error function evaluated at given value.</returns>
            <remarks> We have tested this implementation against the arbitrary precision mpmath library
            and found cases where we can only guarantee 9 significant figures correct.
                <list type="bullet">
                    <item>returns double.PositiveInfinity if <c>z &lt;= 0.0</c>.</item>
                    <item>returns double.NegativeInfinity if <c>z &gt;= 2.0</c>.</item>
                </list>
            </remarks>
            <summary>calculates the complementary inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the complementary inverse error function evaluated at Z.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.ErfInvImpl(System.Double,System.Double,System.Double)">
            <summary>
            The implementation of the inverse error function.
            </summary>
            <param name="p">First intermediate parameter.</param>
            <param name="q">Second intermediate parameter.</param>
            <param name="s">Third intermediate parameter.</param>
            <returns>the inverse error function.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.Factorial(System.Int32)">
            <summary>
            Computes the factorial function x -> x! of an integer number > 0. The function can represent all number up
            to 22! exactly, all numbers up to 170! using a double representation. All larger values will overflow.
            </summary>
            <returns>A value value! for value > 0</returns>
            <remarks>
            If you need to multiply or divide various such factorials, consider using the logarithmic version
            <see cref="M:BlueHeron.Math.Numerics.SpecialFunctions.FactorialLn(System.Int32)"/> instead so you can add instead of multiply and subtract instead of divide, and
            then exponentiate the result using <see cref="M:System.Math.Exp(System.Double)"/>. This will also circumvent the problem that
            factorials become very large even for small parameters.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.Factorial(System.Numerics.BigInteger)">
            <summary>
            Computes the factorial of an integer.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.FactorialLn(System.Int32)">
            <summary>
            Computes the logarithmic factorial function x -> ln(x!) of an integer number > 0.
            </summary>
            <returns>A value value! for value > 0</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.Binomial(System.Int32,System.Int32)">
            <summary>
            Computes the binomial coefficient: n choose k.
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="k">A nonnegative value h.</param>
            <returns>The binomial coefficient: n choose k.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.BinomialLn(System.Int32,System.Int32)">
            <summary>
            Computes the natural logarithm of the binomial coefficient: ln(n choose k).
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="k">A nonnegative value h.</param>
            <returns>The logarithmic binomial coefficient: ln(n choose k).</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.Multinomial(System.Int32,System.Int32[])">
            <summary>
            Computes the multinomial coefficient: n choose n1, n2, n3, ...
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="ni">An array of nonnegative values that sum to <paramref name="n"/>.</param>
            <returns>The multinomial coefficient.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="ni"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="n"/> or any of the <paramref name="ni"/> are negative.</exception>
            <exception cref="T:System.ArgumentException">If the sum of all <paramref name="ni"/> is not equal to <paramref name="n"/>.</exception>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.GammaN">
            <summary>
            The order of the <see cref="M:BlueHeron.Math.Numerics.SpecialFunctions.GammaLn(System.Double)"/> approximation.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.GammaR">
            <summary>
            Auxiliary variable when evaluating the <see cref="M:BlueHeron.Math.Numerics.SpecialFunctions.GammaLn(System.Double)"/> function.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.SpecialFunctions.GammaDk">
            <summary>
            Polynomial coefficients for the <see cref="M:BlueHeron.Math.Numerics.SpecialFunctions.GammaLn(System.Double)"/> approximation.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.GammaLn(System.Double)">
            <summary>
            Computes the logarithm of the Gamma function.
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            <para>This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which achieves an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).</para>
            <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 14 floating point digits.</para>
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.Gamma(System.Double)">
            <summary>
            Computes the Gamma function.
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            <para>
            This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which should achieve an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).
            </para>
            <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 13 floating point digits.</para>
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.GammaUpperRegularized(System.Double,System.Double)">
            <summary>
            Returns the upper incomplete regularized gamma function
            Q(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The lower integral limit.</param>
            <returns>The upper incomplete regularized gamma function.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.GammaUpperIncomplete(System.Double,System.Double)">
            <summary>
            Returns the upper incomplete gamma function
            Gamma(a,x) = int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The lower integral limit.</param>
            <returns>The upper incomplete gamma function.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.GammaLowerIncomplete(System.Double,System.Double)">
            <summary>
            Returns the lower incomplete gamma function
            gamma(a,x) = int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The upper integral limit.</param>
            <returns>The lower incomplete gamma function.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.GammaLowerRegularized(System.Double,System.Double)">
            <summary>
            Returns the lower incomplete regularized gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The upper integral limit.</param>
            <returns>The lower incomplete gamma function.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.GammaLowerRegularizedInv(System.Double,System.Double)">
            <summary>
            Returns the inverse P^(-1) of the regularized lower incomplete gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0,
            such that P^(-1)(a,P(a,x)) == x.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.DiGamma(System.Double)">
            <summary>
            Computes the Digamma function which is mathematically defined as the derivative of the logarithm of the gamma function.
            This implementation is based on
                Jose Bernardo
                Algorithm AS 103:
                Psi ( Digamma ) Function,
                Applied Statistics,
                Volume 25, Number 3, 1976, pages 315-317.
            Using the modifications as in Tom Minka's lightspeed toolbox.
            </summary>
            <param name="x">The argument of the digamma function.</param>
            <returns>The value of the DiGamma function at <paramref name="x"/>.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.SpecialFunctions.DiGammaInv(System.Double)">
            <summary>
            <para>Computes the inverse Digamma function: this is the inverse of the logarithm of the gamma function. This function will
            only return solutions that are positive.</para>
            <para>This implementation is based on the bisection method.</para>
            </summary>
            <param name="p">The argument of the inverse digamma function.</param>
            <returns>The positive solution to the inverse DiGamma function at <paramref name="p"/>.</returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Statistics.ArrayStatistics">
            <summary>
            Statistics operating on arrays assumed to be unsorted.
            WARNING: Methods with the Inplace-suffix may modify the data array by reordering its entries.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.Minimum(System.Double[])">
            <summary>
            Returns the smallest value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.Maximum(System.Double[])">
            <summary>
            Returns the largest value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.MinimumAbsolute(System.Double[])">
            <summary>
            Returns the smallest absolute value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.MaximumAbsolute(System.Double[])">
            <summary>
            Returns the largest absolute value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.Mean(System.Double[])">
            <summary>
            Estimates the arithmetic sample mean from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.GeometricMean(System.Double[])">
            <summary>
            Evaluates the geometric mean of the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.HarmonicMean(System.Double[])">
            <summary>
            Evaluates the harmonic mean of the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.Variance(System.Double[])">
            <summary>
            Estimates the unbiased population variance from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.PopulationVariance(System.Double[])">
            <summary>
            Evaluates the population variance from the full population provided as unsorted array.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.StandardDeviation(System.Double[])">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.PopulationStandardDeviation(System.Double[])">
            <summary>
            Evaluates the population standard deviation from the full population provided as unsorted array.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.MeanVariance(System.Double[])">
            <summary>
            Estimates the arithmetic sample mean and the unbiased population variance from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or any entry is NaN and NaN for variance if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.MeanStandardDeviation(System.Double[])">
            <summary>
            Estimates the arithmetic sample mean and the unbiased population standard deviation from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or any entry is NaN and NaN for standard deviation if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.Covariance(System.Double[],System.Double[])">
            <summary>
            Estimates the unbiased population covariance from the provided two sample arrays.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples1">First sample array.</param>
            <param name="samples2">Second sample array.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.PopulationCovariance(System.Double[],System.Double[])">
            <summary>
            Evaluates the population covariance from the full population provided as two arrays.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population1">First population array.</param>
            <param name="population2">Second population array.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.RootMeanSquare(System.Double[])">
            <summary>
            Estimates the root mean square (RMS) also known as quadratic mean from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.OrderStatisticInplace(System.Double[],System.Int32)">
            <summary>
            Returns the order statistic (order 1..N) from the unsorted data array.
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="order">One-based order of the statistic, must be between 1 and N (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.MedianInplace(System.Double[])">
            <summary>
            Estimates the median value from the unsorted data array.
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.PercentileInplace(System.Double[],System.Int32)">
            <summary>
            Estimates the p-Percentile value from the unsorted data array.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="p">Percentile selector, between 0 and 100 (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.LowerQuartileInplace(System.Double[])">
            <summary>
            Estimates the first quartile value from the unsorted data array.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.UpperQuartileInplace(System.Double[])">
            <summary>
            Estimates the third quartile value from the unsorted data array.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.InterquartileRangeInplace(System.Double[])">
            <summary>
            Estimates the inter-quartile range from the unsorted data array.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.FiveNumberSummaryInplace(System.Double[])">
            <summary>
            Estimates {min, lower-quantile, median, upper-quantile, max} from the unsorted data array.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.QuantileInplace(System.Double[],System.Double)">
            <summary>
            Estimates the tau-th quantile from the unsorted data array.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <remarks>
            R-8, SciPy-(1/3,1/3):
            Linear interpolation of the approximate medians for order statistics.
            When tau &lt; (2/3) / (N + 1/3), use x1. When tau &gt;= (N - 1/3) / (N + 1/3), use xN.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.QuantileCustomInplace(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Estimates the tau-th quantile from the unsorted data array.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified
            by 4 parameters a, b, c and d, consistent with Mathematica.
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive)</param>
            <param name="a">a-parameter</param>
            <param name="b">b-parameter</param>
            <param name="c">c-parameter</param>
            <param name="d">d-parameter</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.QuantileCustomInplace(System.Double[],System.Double,BlueHeron.Math.Numerics.Statistics.QuantileDefinition)">
            <summary>
            Estimates the tau-th quantile from the unsorted data array.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive)</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.ArrayStatistics.RanksInplace(System.Double[],BlueHeron.Math.Numerics.Statistics.RankDefinition)">
            <summary>
            Evaluates the rank of each entry of the unsorted data array.
            The rank definition can be specified to be compatible
            with an existing system.
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Statistics.RankDefinition.Average">
            <summary>Replace ties with their mean (non-integer ranks). Default.</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Statistics.RankDefinition.Min">
            <summary>Replace ties with their minimum (typical sports ranking).</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Statistics.RankDefinition.Max">
            <summary>Replace ties with their maximum.</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Statistics.RankDefinition.First">
            <summary>Permutation with increasing values at each index of ties.</summary>
        </member>
        <member name="F:BlueHeron.Math.Numerics.Statistics.RankDefinition.EmpiricalCDF">
            <summary>?</summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Statistics.RunningStatistics">
            <summary>
            Running statistics accumulator, allows updating by adding values
            or by combining two accumulators.
            </summary>
            <remarks>
            This type declares a DataContract for out of the box ephemeral serialization
            with engines like DataContractSerializer, Protocol Buffers and FsPickler,
            but does not guarantee any compatibility between versions.
            It is not recommended to rely on this mechanism for durable persistence.
            </remarks>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.Count">
            <summary>
            Gets the total number of samples.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.Minimum">
            <summary>
            Returns the minimum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.Maximum">
            <summary>
            Returns the maximum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.Mean">
            <summary>
            Evaluates the sample mean, an estimate of the population mean.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.Variance">
            <summary>
            Estimates the unbiased population variance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.PopulationVariance">
            <summary>
            Evaluates the variance from the provided full population.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.StandardDeviation">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.PopulationStandardDeviation">
            <summary>
            Evaluates the standard deviation from the provided full population.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.Skewness">
            <summary>
            Estimates the unbiased population skewness from the provided samples.
            Uses a normalizer (Bessel's correction; type 2).
            Returns NaN if data has less than three entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.PopulationSkewness">
            <summary>
            Evaluates the population skewness from the full population.
            Does not use a normalizer and would thus be biased if applied to a subset (type 1).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.Kurtosis">
            <summary>
            Estimates the unbiased population excess kurtosis from the provided samples.
            Uses a normalizer (Bessel's correction; type 2).
            Returns NaN if data has less than four entries or if any entry is NaN.
            </summary>
        </member>
        <member name="P:BlueHeron.Math.Numerics.Statistics.RunningStatistics.PopulationKurtosis">
            <summary>
            Evaluates the population excess kurtosis from the full population.
            Does not use a normalizer and would thus be biased if applied to a subset (type 1).
            Returns NaN if data has less than three entries or if any entry is NaN.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.RunningStatistics.Push(System.Double)">
            <summary>
            Update the running statistics by adding another observed sample (in-place).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.RunningStatistics.PushRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Update the running statistics by adding a sequence of observed sample (in-place).
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.RunningStatistics.Combine(BlueHeron.Math.Numerics.Statistics.RunningStatistics,BlueHeron.Math.Numerics.Statistics.RunningStatistics)">
            <summary>
            Create a new running statistics over the combined samples of two existing running statistics.
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics">
            <summary>
            Statistics operating on an array already sorted ascendingly.
            </summary>
            <seealso cref="T:BlueHeron.Math.Numerics.Statistics.ArrayStatistics"/>
            <seealso cref="T:BlueHeron.Math.Numerics.Statistics.StreamingStatistics"/>
            <seealso cref="T:BlueHeron.Math.Numerics.Statistics.Statistics"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.Minimum(System.Double[])">
            <summary>
            Returns the smallest value from the sorted data array (ascending).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.Maximum(System.Double[])">
            <summary>
            Returns the largest value from the sorted data array (ascending).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.OrderStatistic(System.Double[],System.Int32)">
            <summary>
            Returns the order statistic (order 1..N) from the sorted data array (ascending).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="order">One-based order of the statistic, must be between 1 and N (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.Median(System.Double[])">
            <summary>
            Estimates the median value from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.Percentile(System.Double[],System.Int32)">
            <summary>
            Estimates the p-Percentile value from the sorted data array (ascending).
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="p">Percentile selector, between 0 and 100 (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.LowerQuartile(System.Double[])">
            <summary>
            Estimates the first quartile value from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.UpperQuartile(System.Double[])">
            <summary>
            Estimates the third quartile value from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.InterquartileRange(System.Double[])">
            <summary>
            Estimates the inter-quartile range from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.FiveNumberSummary(System.Double[])">
            <summary>
            Estimates {min, lower-quantile, median, upper-quantile, max} from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.Quantile(System.Double[],System.Double)">
            <summary>
            Estimates the tau-th quantile from the sorted data array (ascending).
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <remarks>
            R-8, SciPy-(1/3,1/3):
            Linear interpolation of the approximate medians for order statistics.
            When tau &lt; (2/3) / (N + 1/3), use x1. When tau &gt;= (N - 1/3) / (N + 1/3), use xN.
            </remarks>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.QuantileCustom(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Estimates the tau-th quantile from the sorted data array (ascending).
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified
            by 4 parameters a, b, c and d, consistent with Mathematica.
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <param name="a">a-parameter</param>
            <param name="b">b-parameter</param>
            <param name="c">c-parameter</param>
            <param name="d">d-parameter</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.QuantileCustom(System.Double[],System.Double,BlueHeron.Math.Numerics.Statistics.QuantileDefinition)">
            <summary>
            Estimates the tau-th quantile from the sorted data array (ascending).
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.EmpiricalCDF(System.Double[],System.Double)">
            <summary>
            Estimates the empirical cumulative distribution function (CDF) at x from the sorted data array (ascending).
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="x">The value where to estimate the CDF at.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.QuantileRank(System.Double[],System.Double,BlueHeron.Math.Numerics.Statistics.RankDefinition)">
            <summary>
            Estimates the quantile tau from the sorted data array (ascending).
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="x">Quantile value.</param>
            <param name="definition">Rank definition, to choose how ties should be handled and what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.SortedArrayStatistics.Ranks(System.Double[],BlueHeron.Math.Numerics.Statistics.RankDefinition)">
            <summary>
            Evaluates the rank of each entry of the sorted data array (ascending).
            The rank definition can be specified to be compatible
            with an existing system.
            </summary>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Statistics.Statistics">
            <summary>
            Extension methods to return basic statistics on set of data.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Minimum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The minimum value in the sample data.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Minimum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The minimum value in the sample data.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Maximum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The maximum value in the sample data.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Maximum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The maximum value in the sample data.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.MinimumAbsolute(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum absolute value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The minimum value in the sample data.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.MaximumAbsolute(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum absolute value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The maximum value in the sample data.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the sample mean, an estimate of the population mean.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Mean(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the sample mean, an estimate of the population mean.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="data">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.GeometricMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the geometric mean.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The data to calculate the geometric mean of.</param>
            <returns>The geometric mean of the sample.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.HarmonicMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the harmonic mean.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The data to calculate the harmonic mean of.</param>
            <returns>The harmonic mean of the sample.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population variance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the unbiased population variance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the variance from the provided full population.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the variance from the provided full population.
            On a dataset of size N will use an N normalize and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the standard deviation from the provided full population.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the standard deviation from the provided full population.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Skewness(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population skewness from the provided samples.
            Uses a normalizer (Bessel's correction; type 2).
            Returns NaN if data has less than three entries or if any entry is NaN.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Skewness(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the unbiased population skewness from the provided samples.
            Uses a normalizer (Bessel's correction; type 2).
            Returns NaN if data has less than three entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationSkewness(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the skewness from the full population.
            Does not use a normalizer and would thus be biased if applied to a subset (type 1).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationSkewness(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the skewness from the full population.
            Does not use a normalizer and would thus be biased if applied to a subset (type 1).
            Returns NaN if data has less than two entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Kurtosis(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population kurtosis from the provided samples.
            Uses a normalizer (Bessel's correction; type 2).
            Returns NaN if data has less than four entries or if any entry is NaN.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the unbiased population kurtosis from the provided samples.
            Uses a normalizer (Bessel's correction; type 2).
            Returns NaN if data has less than four entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationKurtosis(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the kurtosis from the full population.
            Does not use a normalizer and would thus be biased if applied to a subset (type 1).
            Returns NaN if data has less than three entries or if any entry is NaN.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationKurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the kurtosis from the full population.
            Does not use a normalizer and would thus be biased if applied to a subset (type 1).
            Returns NaN if data has less than three entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.MeanVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the sample mean and the unbiased population variance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or if any entry is NaN and NaN for variance if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.MeanStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the sample mean and the unbiased population standard deviation from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or if any entry is NaN and NaN for standard deviation if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.SkewnessKurtosis(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population skewness and kurtosis from the provided samples in a single pass.
            Uses a normalizer (Bessel's correction; type 2).
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationSkewnessKurtosis(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the skewness and kurtosis from the full population.
            Does not use a normalizer and would thus be biased if applied to a subset (type 1).
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Covariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population covariance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples1">A subset of samples, sampled from the full population.</param>
            <param name="samples2">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Covariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the unbiased population covariance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="samples1">A subset of samples, sampled from the full population.</param>
            <param name="samples2">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationCovariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population covariance from the provided full populations.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population1">The full population data.</param>
            <param name="population2">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PopulationCovariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the population covariance from the provided full populations.
            On a dataset of size N will use an N normalize and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="population1">The full population data.</param>
            <param name="population2">The full population data.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the root mean square (RMS) also known as quadratic mean.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The data to calculate the RMS of.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the root mean square (RMS) also known as quadratic mean.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="data">The data to calculate the mean of.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the sample median from the provided samples (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the sample median from the provided samples (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Quantile(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Quantile(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double)">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileFunc(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileCustom(System.Collections.Generic.IEnumerable{System.Double},System.Double,BlueHeron.Math.Numerics.Statistics.QuantileDefinition)">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileCustom(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double,BlueHeron.Math.Numerics.Statistics.QuantileDefinition)">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileCustomFunc(System.Collections.Generic.IEnumerable{System.Double},BlueHeron.Math.Numerics.Statistics.QuantileDefinition)">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileCustomFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},BlueHeron.Math.Numerics.Statistics.QuantileDefinition)">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Percentile(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Estimates the p-Percentile value from the provided samples.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="p">Percentile selector, between 0 and 100 (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Percentile(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
            <summary>
            Estimates the p-Percentile value from the provided samples.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="p">Percentile selector, between 0 and 100 (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PercentileFunc(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the p-Percentile value from the provided samples.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.PercentileFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the p-Percentile value from the provided samples.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the first quartile value from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.LowerQuartile(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the first quartile value from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the third quartile value from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.UpperQuartile(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the third quartile value from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.InterquartileRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the inter-quartile range from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.InterquartileRange(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the inter-quartile range from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.FiveNumberSummary(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates {min, lower-quantile, median, upper-quantile, max} from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.FiveNumberSummary(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates {min, lower-quantile, median, upper-quantile, max} from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.OrderStatistic(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Returns the order statistic (order 1..N) from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="order">One-based order of the statistic, must be between 1 and N (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.OrderStatisticFunc(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the order statistic (order 1..N) from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Ranks(System.Collections.Generic.IEnumerable{System.Double},BlueHeron.Math.Numerics.Statistics.RankDefinition)">
            <summary>
            Evaluates the rank of each entry of the provided samples.
            The rank definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="definition">Rank definition, to choose how ties should be handled and what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Ranks(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},BlueHeron.Math.Numerics.Statistics.RankDefinition)">
            <summary>
            Evaluates the rank of each entry of the provided samples.
            The rank definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="definition">Rank definition, to choose how ties should be handled and what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileRank(System.Collections.Generic.IEnumerable{System.Double},System.Double,BlueHeron.Math.Numerics.Statistics.RankDefinition)">
            <summary>
            Estimates the quantile tau from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="x">Quantile value.</param>
            <param name="definition">Rank definition, to choose how ties should be handled and what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileRank(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double,BlueHeron.Math.Numerics.Statistics.RankDefinition)">
            <summary>
            Estimates the quantile tau from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="x">Quantile value.</param>
            <param name="definition">Rank definition, to choose how ties should be handled and what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileRankFunc(System.Collections.Generic.IEnumerable{System.Double},BlueHeron.Math.Numerics.Statistics.RankDefinition)">
            <summary>
            Estimates the quantile tau from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="definition">Rank definition, to choose how ties should be handled and what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.QuantileRankFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},BlueHeron.Math.Numerics.Statistics.RankDefinition)">
            <summary>
            Estimates the quantile tau from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specified to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="definition">Rank definition, to choose how ties should be handled and what product/definition it should be consistent with</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.EmpiricalCDF(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Estimates the empirical cumulative distribution function (CDF) at x from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="x">The value where to estimate the CDF at.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.EmpiricalCDF(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double)">
            <summary>
            Estimates the empirical cumulative distribution function (CDF) at x from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="x">The value where to estimate the CDF at.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.EmpiricalCDFFunc(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the empirical cumulative distribution function (CDF) at x from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.EmpiricalCDFFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the empirical cumulative distribution function (CDF) at x from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.EmpiricalInvCDF(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Estimates the empirical inverse CDF at tau from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.EmpiricalInvCDF(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double)">
            <summary>
            Estimates the empirical inverse CDF at tau from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.EmpiricalInvCDFFunc(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the empirical inverse CDF at tau from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.EmpiricalInvCDFFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the empirical inverse CDF at tau from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Entropy(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the entropy of a stream of double values in bits.
            Returns NaN if any of the values in the stream are NaN.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.Statistics.Entropy(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Calculates the entropy of a stream of double values in bits.
            Returns NaN if any of the values in the stream are NaN.
            Null-entries are ignored.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Statistics.StreamingStatistics">
            <summary>
            Statistics operating on an IEnumerable in a single pass, without keeping the full data in memory.
            Can be used in a streaming way, e.g. on large datasets not fitting into memory.
            </summary>
            <seealso cref="T:BlueHeron.Math.Numerics.Statistics.StreamingStatistics"/>
            <seealso cref="T:BlueHeron.Math.Numerics.Statistics.Statistics"/>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Minimum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the smallest value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Minimum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the smallest value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Maximum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the largest value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Maximum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the largest value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MinimumAbsolute(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the smallest absolute value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MinimumAbsolute(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the smallest absolute value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MaximumAbsolute(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the largest absolute value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MaximumAbsolute(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the largest absolute value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MinimumMagnitudePhase(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Returns the smallest absolute value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MaximumMagnitudePhase(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Returns the largest absolute value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the arithmetic sample mean from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Mean(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Estimates the arithmetic sample mean from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.GeometricMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the geometric mean of the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.GeometricMean(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Evaluates the geometric mean of the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.HarmonicMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the harmonic mean of the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.HarmonicMean(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Evaluates the harmonic mean of the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population variance from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Variance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Estimates the unbiased population variance from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population variance from the full population provided as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.PopulationVariance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Evaluates the population variance from the full population provided as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population standard deviation from the full population provided as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Evaluates the population standard deviation from the full population provided as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MeanVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the arithmetic sample mean and the unbiased population variance from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or any entry is NaN, and NaN for variance if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MeanVariance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Estimates the arithmetic sample mean and the unbiased population variance from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or any entry is NaN, and NaN for variance if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MeanStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the arithmetic sample mean and the unbiased population standard deviation from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or any entry is NaN, and NaN for standard deviation if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.MeanStandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Estimates the arithmetic sample mean and the unbiased population standard deviation from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN for mean if data is empty or any entry is NaN, and NaN for standard deviation if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Covariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population covariance from the provided two sample enumerable sequences, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples1">First sample stream.</param>
            <param name="samples2">Second sample stream.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Covariance(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Estimates the unbiased population covariance from the provided two sample enumerable sequences, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples1">First sample stream.</param>
            <param name="samples2">Second sample stream.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.PopulationCovariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population covariance from the full population provided as two enumerable sequences, in a single pass without memoization.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population1">First population stream.</param>
            <param name="population2">Second population stream.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.PopulationCovariance(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Evaluates the population covariance from the full population provided as two enumerable sequences, in a single pass without memoization.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population1">First population stream.</param>
            <param name="population2">Second population stream.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the root mean square (RMS) also known as quadratic mean from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Estimates the root mean square (RMS) also known as quadratic mean from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Statistics.StreamingStatistics.Entropy(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the entropy of a stream of double values.
            Returns NaN if any of the values in the stream are NaN.
            </summary>
            <param name="stream">The input stream to evaluate.</param>
            <returns></returns>
        </member>
        <member name="T:BlueHeron.Math.Numerics.Threading.CommonParallel">
            <summary>
            Used to simplify parallel code.
            </summary>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Threading.CommonParallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The body to be invoked for each iteration range.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Threading.CommonParallel.For(System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="rangeSize">The partition size for splitting work into smaller pieces.</param>
            <param name="body">The body to be invoked for each iteration range.</param>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Threading.CommonParallel.Invoke(System.Action[])">
            <summary>
            Executes each of the provided actions inside a discrete, asynchronous task.
            </summary>
            <param name="actions">An array of actions to execute.</param>
            <exception cref="T:System.ArgumentException">The actions array contains a <c>null</c> element.</exception>
            <exception cref="T:System.AggregateException">At least one invocation of the actions threw an exception.</exception>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Threading.CommonParallel.Aggregate``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Func{``0[],``0})">
            <summary>
            Selects an item (such as Max or Min).
            </summary>
            <param name="fromInclusive">Starting index of the loop.</param>
            <param name="toExclusive">Ending index of the loop</param>
            <param name="select">The function to select items over a subset.</param>
            <param name="reduce">The function to select the item of selection from the subsets.</param>
            <returns>The selected value.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Threading.CommonParallel.Aggregate``2(``0[],System.Func{System.Int32,``0,``1},System.Func{``1[],``1})">
            <summary>
            Selects an item (such as Max or Min).
            </summary>
            <param name="array">The array to iterate over.</param>
            <param name="select">The function to select items over a subset.</param>
            <param name="reduce">The function to select the item of selection from the subsets.</param>
            <returns>The selected value.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Threading.CommonParallel.Aggregate``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Func{``0,``0,``0},``0)">
            <summary>
            Selects an item (such as Max or Min).
            </summary>
            <param name="fromInclusive">Starting index of the loop.</param>
            <param name="toExclusive">Ending index of the loop</param>
            <param name="select">The function to select items over a subset.</param>
            <param name="reducePair">The function to select the item of selection from the subsets.</param>
            <param name="reduceDefault">Default result of the reduce function on an empty set.</param>
            <returns>The selected value.</returns>
        </member>
        <member name="M:BlueHeron.Math.Numerics.Threading.CommonParallel.Aggregate``2(``0[],System.Func{System.Int32,``0,``1},System.Func{``1,``1,``1},``1)">
            <summary>
            Selects an item (such as Max or Min).
            </summary>
            <param name="array">The array to iterate over.</param>
            <param name="select">The function to select items over a subset.</param>
            <param name="reducePair">The function to select the item of selection from the subsets.</param>
            <param name="reduceDefault">Default result of the reduce function on an empty set.</param>
            <returns>The selected value.</returns>
        </member>
        <member name="T:Blueheron.Math.Numerics.Statistics.Bucket">
            <summary>
            A <see cref="T:Blueheron.Math.Numerics.Statistics.Histogram"/> consists of a series of <see cref="T:Blueheron.Math.Numerics.Statistics.Bucket"/>s, each representing a region limited by a lower bound (exclusive) and an upper bound (inclusive).
            </summary>
        </member>
        <member name="T:Blueheron.Math.Numerics.Statistics.Bucket.PointComparer">
            <summary>
            This <see cref="T:System.Collections.Generic.IComparer`1"/> performs comparisons between a point and a bucket.
            </summary>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Bucket.PointComparer.Compare(Blueheron.Math.Numerics.Statistics.Bucket,Blueheron.Math.Numerics.Statistics.Bucket)">
            <summary>
            Compares a point and a bucket. The point will be encapsulated in a bucket with width 0.
            </summary>
            <param name="bkt1">The first bucket to compare.</param>
            <param name="bkt2">The second bucket to compare.</param>
            <returns>-1 when the point is less than this bucket, 0 when it is in this bucket and 1 otherwise.</returns>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Bucket.LowerBound">
            <summary>
            Lower Bound of the Bucket.
            </summary>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Bucket.UpperBound">
            <summary>
            Upper Bound of the Bucket.
            </summary>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Bucket.Count">
            <summary>
            The number of datapoints in the bucket.
            </summary>
            <remarks>
            Value may be NaN if this was constructed as a <see cref="T:System.Collections.Generic.IComparer`1"/> argument.
            </remarks>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Bucket.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Bucket class.
            </summary>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Bucket.#ctor(System.Double)">
            <summary>
            Constructs a Bucket that can be used as an argument for a <see cref="T:System.Collections.Generic.IComparer`1"/>
            like <see cref="P:Blueheron.Math.Numerics.Statistics.Bucket.DefaultPointComparer"/> when performing a Binary search.
            </summary>
            <param name="targetValue">Value to look for</param>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Bucket.Clone">
            <summary>
            Creates a copy of the Bucket with the lowerbound, upperbound and counts exactly equal.
            </summary>
            <returns>A cloned Bucket object.</returns>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Bucket.Width">
            <summary>
            Width of the Bucket.
            </summary>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Bucket.IsSinglePoint">
            <summary>
            True if this is a single point argument for <see cref="T:System.Collections.Generic.IComparer`1"/>
            when performing a Binary search.
            </summary>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Bucket.DefaultPointComparer">
            <summary>
            Default comparer.
            </summary>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Bucket.Contains(System.Double)">
            <summary>
            This method check whether a point is contained within this bucket.
            </summary>
            <param name="x">The point to check.</param>
            <returns>
             0 if the point falls within the bucket boundaries;
            -1 if the point is smaller than the bucket,
            +1 if the point is larger than the bucket.</returns>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Bucket.CompareTo(Blueheron.Math.Numerics.Statistics.Bucket)">
            <summary>
            Comparison of two disjoint buckets. The buckets cannot be overlapping.
            </summary>
            <returns>
             0 if <c>UpperBound</c> and <c>LowerBound</c> are bit-for-bit equal
             1 if This bucket is lower that the compared bucket
            -1 otherwise
            </returns>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Bucket.Equals(System.Object)">
            <summary>
            Checks whether two Buckets are equal.
            </summary>
            <remarks>
            <c>UpperBound</c> and <c>LowerBound</c> are compared bit-for-bit, but This method tolerates a
            difference in <c>Count</c> given by  <seealso cref="M:BlueHeron.Math.Numerics.Precision.AlmostEqual(System.Double,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Bucket.GetHashCode">
            <summary>
            Provides a hash code for this bucket.
            </summary>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Bucket.ToString">
            <summary>
            Formats a human-readable string for this bucket.
            </summary>
        </member>
        <member name="T:Blueheron.Math.Numerics.Statistics.Histogram">
            <summary>
            A class which computes histograms of data.
            </summary>
        </member>
        <member name="F:Blueheron.Math.Numerics.Statistics.Histogram.mBuckets">
            <summary>
            Contains all the <c>Bucket</c>s of the <c>Histogram</c>.
            </summary>
        </member>
        <member name="F:Blueheron.Math.Numerics.Statistics.Histogram.mBucketsAreSorted">
            <summary>
            Indicates whether the elements of <c>buckets</c> are currently sorted.
            </summary>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.#ctor">
            <summary>
            Initializes a new instance of the Histogram class.
            </summary>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Constructs a Histogram with a specific number of equally sized buckets. The upper and lower bound of the histogram
            will be set to the smallest and largest datapoint.
            </summary>
            <param name="data">The data sequence to build a histogram on.</param>
            <param name="nbuckets">The number of buckets to use.</param>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Double,System.Double)">
            <summary>
            Constructs a Histogram with a specific number of equally sized buckets.
            </summary>
            <param name="data">The data sequence to build a histogram on.</param>
            <param name="nbuckets">The number of buckets to use.</param>
            <param name="lower">The histogram lower bound.</param>
            <param name="upper">The histogram upper bound.</param>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.AddData(System.Double)">
            <summary>
            Add one data point to the histogram. If the datapoint falls outside the range of the histogram, the lowerbound or upperbound will automatically adapt.
            </summary>
            <param name="d">The datapoint which we want to add.</param>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.AddData(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Add a sequence of data point to the histogram. If the datapoint falls outside the range of the histogram, the lowerbound or upperbound will automatically adapt.
            </summary>
            <param name="data">The sequence of datapoints which we want to add.</param>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.AddBucket(Blueheron.Math.Numerics.Statistics.Bucket)">
            <summary>
            Add a <see cref="T:Blueheron.Math.Numerics.Statistics.Bucket"/> to the <see cref="T:Blueheron.Math.Numerics.Statistics.Histogram"/>.
            </summary>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.LazySort">
            <summary>
            Sort the buckets if needed.
            </summary>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.GetBucketOf(System.Double)">
            <summary>
            Returns the <c>Bucket</c> that contains the value <c>v</c>.
            </summary>
            <param name="v">The point to search the bucket for.</param>
            <returns>A copy of the bucket containing point <paramref name="v"/>.</returns>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.GetBucketIndexOf(System.Double)">
            <summary>
            Returns the index in the <c>Histogram</c> of the <c>Bucket</c>
            that contains the value <c>v</c>.
            </summary>
            <param name="v">The point to search the bucket index for.</param>
            <returns>The index of the bucket containing the point.</returns>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Histogram.LowerBound">
            <summary>
            Returns the lower bound of the histogram.
            </summary>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Histogram.UpperBound">
            <summary>
            Returns the upper bound of the histogram.
            </summary>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Histogram.Item(System.Int32)">
            <summary>
            Gets the <c>n</c>'th bucket.
            </summary>
            <param name="n">The index of the bucket to be returned.</param>
            <returns>A copy of the <c>n</c>'th bucket.</returns>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Histogram.BucketCount">
            <summary>
            Gets the number of buckets.
            </summary>
        </member>
        <member name="P:Blueheron.Math.Numerics.Statistics.Histogram.DataCount">
            <summary>
            Gets the total number of datapoints in the histogram.
            </summary>
        </member>
        <member name="M:Blueheron.Math.Numerics.Statistics.Histogram.ToString">
            <summary>
            Prints the buckets contained in the <see cref="T:Blueheron.Math.Numerics.Statistics.Histogram"/>.
            </summary>
        </member>
    </members>
</doc>
